syntax = "proto3";
package hexzpb;

import "google/protobuf/timestamp.proto";
option go_package = "github.com/dnswlt/hexz/hexzpb";

message Board {
    enum GameState {
        INITIAL = 0;
        RUNNING = 1;
        FINISHED = 2;
    }
    int32 turn = 1;
    int32 move = 2;
    int32 last_revealed = 3;
    repeated Field flat_fields = 4;
    repeated int32 score = 5;
    repeated ResourceInfo resources = 6;
    GameState state = 7;
}

message Field {
    enum CellType {
        NORMAL = 0;
        DEAD = 1;
        GRASS = 2;
        ROCK = 3;
        FIRE = 4;
        FLAG = 5;
        PEST = 6;
        DEATH = 7;
    }
    CellType type = 1;
    int32 owner = 2;
    bool hidden = 3;
    int32 value = 4;
    int32 blocked = 5;
    int32 lifetime = 6;
    repeated int32 next_val = 7;
}

message ResourceInfo {
    // Has exactly as many elements as there are cell types.
    repeated int32 num_pieces = 1;
}

message Player {
    string id = 1;
    string name = 2;
}

// GameInfo is summary information about an ongoing game, used to 
// display a list of games to the user.
message GameInfo {
    string id = 1;
    string host = 2; // The player hosting the game.
    google.protobuf.Timestamp started = 3;
    string type = 4; // Expected to match a hexz.GameType value.
    bool cpu_player = 5; // True if this is a single player game against a CPU player.
}

// This message contains all data to restore a game state.
// It can be used to save and load games in a memory store.
message GameState {
    GameInfo game_info = 1;
    int64 seqnum = 2;
    google.protobuf.Timestamp modified = 4;
    // Players in this game, in the order they joined.
    repeated Player players = 5;
    GameEngineState engine_state = 6;
}

// This message contains all data to restore a game engine state.
// Every GameEngine implementation implements the .Encode() method
// to encode its state into this message.
message GameEngineState {
    oneof state {
        // All game engine types should have one field in this oneof.
        GameEngineFlagzState flagz = 1;
        GameEngineClassicState classic = 2;
        GameEngineFreeformState freeform = 3;
    }
}

// The encoded state of a GameEngineFlagz. Used for saving and loading games.
message GameEngineFlagzState {
    Board board = 1;
    int32 free_cells = 2;
    // Always exactly two elements, one per player.
    repeated int32 normal_moves = 3;
    // History of moves made so far.
    repeated GameEngineMove moves = 4;
}

// The encoded state of a GameEngineClassic. Used for saving and loading games.
message GameEngineClassicState {
    Board board = 1;
}

// The encoded state of a GameEngineFreeform. Used for saving and loading games.
message GameEngineFreeformState {
    Board board = 1;
}

message GameEngineMove {
    int32 player_num = 1;
	int32 move = 2;
	int32 row = 3;
	int32 col = 4;
	Field.CellType cell_type = 5;
}

// MCTSExample encodes all data that is necessary to generate a training example
// for the NeuraMCTS model.
// Normally, examples would be saved as HDF5 files, but to be facilitate the
// generation of examples in our highly optimized Go implementation, we use
// this message format instead. Python code can transform this into HDF5 files.
message MCTSExample {
    string game_id = 1;
    // The board, at any step in a fully played game.
    Board board = 2;
    // The "value", i.e. the final result of the game. Always has two elements.
    repeated int32 result = 3;
    // The learnt "policy", i.e. the MCTS visit counts and win rates for each move.
    message MoveStats {
        GameEngineMove move = 1;
        int32 visits = 2;
        float win_rate = 3;
    }
    repeated MoveStats move_stats = 4;
}

//
// API for communication with remote CPU players.
//

message SuggestMoveRequest {
    // Maximum time the engine is allowed to think, in milliseconds.
	int64 max_think_time_ms = 1;
	// Game engine state from which to start thinking.
	GameEngineState game_engine_state = 2;
}

message SuggestMoveStats {
    // EvalKind indicates the kind of evaluation that the given value represents.
    enum ScoreKind {
        // The final evaluation score that was used decide which move to make.
        FINAL = 0;
        // The prior probabilities of a (neural) MCTS search (a.k.a. move_probs).
        MCTS_PRIOR = 1;
    }
    message Score {
        ScoreKind kind = 1;
        float score = 2;
    }
    message ScoredMove {
        int32 row = 1;
        int32 col = 2;
        Field.CellType type = 3;
        // Should be between [0..1] and indicate the likelihood of choosing this move.
        repeated Score scores = 4;     
    }
    // All scores that the agent generated. If not empty, the first element
    // in the sequence MUST be the FINAL score.
    repeated ScoredMove moves = 1;
    // (Optional) evaluation of the board as a whole: does it look winning (1) or losing (-1)?
    float value = 2;
}

message SuggestMoveResponse {
	GameEngineMove move = 1;
    SuggestMoveStats move_stats = 2;
}

//
// API for communication between workers and training server.
//

message ModelKey {
    string name = 1;
    int32 checkpoint = 2;
}

// Used by workers to upload examples to the training server.
message AddTrainingExamplesRequest {
    repeated TrainingExample examples = 1;
    // ID identifying the worker run that generated this example.
    // Typically a random UUID.
    string execution_id = 2;
}

message AddTrainingExamplesResponse {
    enum Status {
        STATUS_UNSPECIFIED = 0;
        ACCEPTED = 1;
        REJECTED_WRONG_MODEL = 2;
        REJECTED_AT_CAPACITY = 3;
        REJECTED_OTHER = 4;
    }
    Status status = 1;
    // Tells the worker which model to use for subsequent requests.
    ModelKey latest_model = 2;
    // Populated if there was an error processing the request.
    string error_message = 3;
}

// TrainingExample is used to send training examples across the wire and store
// them on disk in the Python and C++ implementations.
message TrainingExample {
    // Timestamp at which this example was generated.
    int64 unix_micros = 1;
    // The player whose turn it was (the current player).
    int32 turn = 7;

    // The move that was made during self-play.
    GameEngineMove move = 9;

    // Encoding indicates how the bytes fields were encoded.
    // In Python workers, we use numpy (np.save), while in C++ we use
    // PyTorch (torch::pickle_save), since numpy is not available.
    enum Encoding {
        NUMPY = 0;
        PYTORCH = 1;
    }
    Encoding encoding = 6;

    // Training inputs.
    //
    // Encoded array containing the (11, 11, 10) Board from the view of the current player.
    // Serialized to bytes using np.save or torch::pickle_save.
    bytes board = 2;
    // Encoded array containing the (2, 11, 10) action mask indicating which moves
    // are valid on the given board.
    bytes action_mask = 8;

    // Training labels.
    //
    // Encoded array containing the (2, 11, 10) move likelihoods.
    // Serialized to bytes using np.save or torch::pickle_save.
    bytes move_probs = 3;
    // The outcome of the game, from the perspective of the current player:
    // -1: lost, 0: draw, 1: won
    float result = 4;

    // Model outputs during self-play.
    message ModelPredictions {
        // Encoded array containing the (2, 11, 10) prior move probabilities as predicted
        // by the model. If enabled, contains the added Dirichlet noise, i.e., these
        // priors were used for the neural MCTS runs.
        bytes priors = 1;
        float value = 2;
    }
    ModelPredictions model_predictions = 10;
    
    // The model that was used to generate this particular example.
    // Strictly speaking, the model can be updated even while a single
    // is generated (i.e. in the middle of a single MCTS tree search).
    // The key stored here is the one that was current when the search was over.
    ModelKey model_key = 11;

    message Stats {
        // Time it took to generate this example (i.e., to generate the corresponding
        // neural MCTS move suggestion).
        int64 duration_micros = 1;
        // Number of valid moves (equal to the number of root child nodes).
        int32 valid_moves = 2;
        // Times that the root node was visited.
        int32 visit_count = 3;
        // Child nodes of the root node that were visited at least once.
        int32 visited_children = 4;
        // Maximum depth of the search tree. The root node has depth 0.
        int32 search_depth = 5;
        // Total number of nodes in the search tree, including leaves.
        int32 search_tree_size = 6;
        // Number of non-leaf nodes in the tree, i.e. those visited at least once.
        int32 branch_nodes = 7;
        // Min/max visit counts of the root node's children.
        int32 min_child_vc = 8;
        int32 max_child_vc = 9;
        // The Q-value of the selected child node, i.e. wins/visit_count.
        int32 selected_child_q = 13;
        // The visit count of the selected child node.
        int32 selected_child_vc = 10;
        // Number of nodes per depth level in the tree.
        repeated int32 nodes_per_depth = 12;
    }
    Stats stats = 5;
}

message ModelEncoding {
    enum Enum {
        // Model's state_dict was saved using torch.save.
        STATE_DICT = 0;
        // Model was saved using torch.jit.script.
        JIT_SCRIPT = 1;
        // Model was saved using torch.jit.trace.
        JIT_TRACE = 2;
    }
}

message FetchModelRequest {
    // Set model_key.checkpoint == -1 to request the latest checkpoint.
    // Specify no model_key at all to fetch the latest model for training.
    ModelKey model_key = 1;
    ModelEncoding.Enum encoding = 2;
}

message FetchModelResponse {
    ModelKey model_key = 1;
    // Serialized PyTorch model. 
    bytes model_bytes = 2;
    // Encoding that was used to serializez the model.
    ModelEncoding.Enum encoding = 3;
}

message ControlRequest {
    string execution_id = 1;
}
message ControlEvent {
    message Pause {}
    message Resume {}
    oneof event_type {
        Pause pause = 1;
        Resume resume = 2;
    }
}

service TrainingService {
    rpc AddTrainingExamples(AddTrainingExamplesRequest) returns (AddTrainingExamplesResponse) {}
    rpc FetchModel(FetchModelRequest) returns (FetchModelResponse) {}
    rpc ControlEvents(ControlRequest) returns (stream ControlEvent) {}
}

service CPUPlayerService {
    rpc SuggestMove(SuggestMoveRequest) returns (SuggestMoveResponse) {}
}
