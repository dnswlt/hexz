// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: hexzpb/hexz.proto

package hexzpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Board_GameState int32

const (
	Board_INITIAL  Board_GameState = 0
	Board_RUNNING  Board_GameState = 1
	Board_FINISHED Board_GameState = 2
)

// Enum value maps for Board_GameState.
var (
	Board_GameState_name = map[int32]string{
		0: "INITIAL",
		1: "RUNNING",
		2: "FINISHED",
	}
	Board_GameState_value = map[string]int32{
		"INITIAL":  0,
		"RUNNING":  1,
		"FINISHED": 2,
	}
)

func (x Board_GameState) Enum() *Board_GameState {
	p := new(Board_GameState)
	*p = x
	return p
}

func (x Board_GameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Board_GameState) Descriptor() protoreflect.EnumDescriptor {
	return file_hexzpb_hexz_proto_enumTypes[0].Descriptor()
}

func (Board_GameState) Type() protoreflect.EnumType {
	return &file_hexzpb_hexz_proto_enumTypes[0]
}

func (x Board_GameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Board_GameState.Descriptor instead.
func (Board_GameState) EnumDescriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{0, 0}
}

type Field_CellType int32

const (
	Field_NORMAL Field_CellType = 0
	Field_DEAD   Field_CellType = 1
	Field_GRASS  Field_CellType = 2
	Field_ROCK   Field_CellType = 3
	Field_FIRE   Field_CellType = 4
	Field_FLAG   Field_CellType = 5
	Field_PEST   Field_CellType = 6
	Field_DEATH  Field_CellType = 7
)

// Enum value maps for Field_CellType.
var (
	Field_CellType_name = map[int32]string{
		0: "NORMAL",
		1: "DEAD",
		2: "GRASS",
		3: "ROCK",
		4: "FIRE",
		5: "FLAG",
		6: "PEST",
		7: "DEATH",
	}
	Field_CellType_value = map[string]int32{
		"NORMAL": 0,
		"DEAD":   1,
		"GRASS":  2,
		"ROCK":   3,
		"FIRE":   4,
		"FLAG":   5,
		"PEST":   6,
		"DEATH":  7,
	}
)

func (x Field_CellType) Enum() *Field_CellType {
	p := new(Field_CellType)
	*p = x
	return p
}

func (x Field_CellType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Field_CellType) Descriptor() protoreflect.EnumDescriptor {
	return file_hexzpb_hexz_proto_enumTypes[1].Descriptor()
}

func (Field_CellType) Type() protoreflect.EnumType {
	return &file_hexzpb_hexz_proto_enumTypes[1]
}

func (x Field_CellType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Field_CellType.Descriptor instead.
func (Field_CellType) EnumDescriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{1, 0}
}

// EvalKind indicates the kind of evaluation that the given value represents.
type SuggestMoveStats_ScoreKind int32

const (
	// The final evaluation score that was used decide which move to make.
	SuggestMoveStats_FINAL SuggestMoveStats_ScoreKind = 0
	// The prior probabilities of a (neural) MCTS search (a.k.a. move_probs).
	SuggestMoveStats_MCTS_PRIOR SuggestMoveStats_ScoreKind = 1
)

// Enum value maps for SuggestMoveStats_ScoreKind.
var (
	SuggestMoveStats_ScoreKind_name = map[int32]string{
		0: "FINAL",
		1: "MCTS_PRIOR",
	}
	SuggestMoveStats_ScoreKind_value = map[string]int32{
		"FINAL":      0,
		"MCTS_PRIOR": 1,
	}
)

func (x SuggestMoveStats_ScoreKind) Enum() *SuggestMoveStats_ScoreKind {
	p := new(SuggestMoveStats_ScoreKind)
	*p = x
	return p
}

func (x SuggestMoveStats_ScoreKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SuggestMoveStats_ScoreKind) Descriptor() protoreflect.EnumDescriptor {
	return file_hexzpb_hexz_proto_enumTypes[2].Descriptor()
}

func (SuggestMoveStats_ScoreKind) Type() protoreflect.EnumType {
	return &file_hexzpb_hexz_proto_enumTypes[2]
}

func (x SuggestMoveStats_ScoreKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SuggestMoveStats_ScoreKind.Descriptor instead.
func (SuggestMoveStats_ScoreKind) EnumDescriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{13, 0}
}

type AddTrainingExamplesResponse_Status int32

const (
	AddTrainingExamplesResponse_STATUS_UNSPECIFIED   AddTrainingExamplesResponse_Status = 0
	AddTrainingExamplesResponse_ACCEPTED             AddTrainingExamplesResponse_Status = 1
	AddTrainingExamplesResponse_REJECTED_WRONG_MODEL AddTrainingExamplesResponse_Status = 2
	AddTrainingExamplesResponse_REJECTED_AT_CAPACITY AddTrainingExamplesResponse_Status = 3
	AddTrainingExamplesResponse_REJECTED_OTHER       AddTrainingExamplesResponse_Status = 4
)

// Enum value maps for AddTrainingExamplesResponse_Status.
var (
	AddTrainingExamplesResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "ACCEPTED",
		2: "REJECTED_WRONG_MODEL",
		3: "REJECTED_AT_CAPACITY",
		4: "REJECTED_OTHER",
	}
	AddTrainingExamplesResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":   0,
		"ACCEPTED":             1,
		"REJECTED_WRONG_MODEL": 2,
		"REJECTED_AT_CAPACITY": 3,
		"REJECTED_OTHER":       4,
	}
)

func (x AddTrainingExamplesResponse_Status) Enum() *AddTrainingExamplesResponse_Status {
	p := new(AddTrainingExamplesResponse_Status)
	*p = x
	return p
}

func (x AddTrainingExamplesResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddTrainingExamplesResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_hexzpb_hexz_proto_enumTypes[3].Descriptor()
}

func (AddTrainingExamplesResponse_Status) Type() protoreflect.EnumType {
	return &file_hexzpb_hexz_proto_enumTypes[3]
}

func (x AddTrainingExamplesResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddTrainingExamplesResponse_Status.Descriptor instead.
func (AddTrainingExamplesResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{17, 0}
}

// Encoding indicates how the bytes fields were encoded.
// In Python workers, we use numpy (np.save), while in C++ we use
// PyTorch (torch::pickle_save), since numpy is not available.
type TrainingExample_Encoding int32

const (
	TrainingExample_NUMPY   TrainingExample_Encoding = 0
	TrainingExample_PYTORCH TrainingExample_Encoding = 1
)

// Enum value maps for TrainingExample_Encoding.
var (
	TrainingExample_Encoding_name = map[int32]string{
		0: "NUMPY",
		1: "PYTORCH",
	}
	TrainingExample_Encoding_value = map[string]int32{
		"NUMPY":   0,
		"PYTORCH": 1,
	}
)

func (x TrainingExample_Encoding) Enum() *TrainingExample_Encoding {
	p := new(TrainingExample_Encoding)
	*p = x
	return p
}

func (x TrainingExample_Encoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrainingExample_Encoding) Descriptor() protoreflect.EnumDescriptor {
	return file_hexzpb_hexz_proto_enumTypes[4].Descriptor()
}

func (TrainingExample_Encoding) Type() protoreflect.EnumType {
	return &file_hexzpb_hexz_proto_enumTypes[4]
}

func (x TrainingExample_Encoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrainingExample_Encoding.Descriptor instead.
func (TrainingExample_Encoding) EnumDescriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{18, 0}
}

type Board struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Turn         int32           `protobuf:"varint,1,opt,name=turn,proto3" json:"turn,omitempty"`
	Move         int32           `protobuf:"varint,2,opt,name=move,proto3" json:"move,omitempty"`
	LastRevealed int32           `protobuf:"varint,3,opt,name=last_revealed,json=lastRevealed,proto3" json:"last_revealed,omitempty"`
	FlatFields   []*Field        `protobuf:"bytes,4,rep,name=flat_fields,json=flatFields,proto3" json:"flat_fields,omitempty"`
	Score        []int32         `protobuf:"varint,5,rep,packed,name=score,proto3" json:"score,omitempty"`
	Resources    []*ResourceInfo `protobuf:"bytes,6,rep,name=resources,proto3" json:"resources,omitempty"`
	State        Board_GameState `protobuf:"varint,7,opt,name=state,proto3,enum=hexzpb.Board_GameState" json:"state,omitempty"`
}

func (x *Board) Reset() {
	*x = Board{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Board) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Board) ProtoMessage() {}

func (x *Board) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Board.ProtoReflect.Descriptor instead.
func (*Board) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{0}
}

func (x *Board) GetTurn() int32 {
	if x != nil {
		return x.Turn
	}
	return 0
}

func (x *Board) GetMove() int32 {
	if x != nil {
		return x.Move
	}
	return 0
}

func (x *Board) GetLastRevealed() int32 {
	if x != nil {
		return x.LastRevealed
	}
	return 0
}

func (x *Board) GetFlatFields() []*Field {
	if x != nil {
		return x.FlatFields
	}
	return nil
}

func (x *Board) GetScore() []int32 {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *Board) GetResources() []*ResourceInfo {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Board) GetState() Board_GameState {
	if x != nil {
		return x.State
	}
	return Board_INITIAL
}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     Field_CellType `protobuf:"varint,1,opt,name=type,proto3,enum=hexzpb.Field_CellType" json:"type,omitempty"`
	Owner    int32          `protobuf:"varint,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Hidden   bool           `protobuf:"varint,3,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Value    int32          `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Blocked  int32          `protobuf:"varint,5,opt,name=blocked,proto3" json:"blocked,omitempty"`
	Lifetime int32          `protobuf:"varint,6,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	NextVal  []int32        `protobuf:"varint,7,rep,packed,name=next_val,json=nextVal,proto3" json:"next_val,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{1}
}

func (x *Field) GetType() Field_CellType {
	if x != nil {
		return x.Type
	}
	return Field_NORMAL
}

func (x *Field) GetOwner() int32 {
	if x != nil {
		return x.Owner
	}
	return 0
}

func (x *Field) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Field) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Field) GetBlocked() int32 {
	if x != nil {
		return x.Blocked
	}
	return 0
}

func (x *Field) GetLifetime() int32 {
	if x != nil {
		return x.Lifetime
	}
	return 0
}

func (x *Field) GetNextVal() []int32 {
	if x != nil {
		return x.NextVal
	}
	return nil
}

type ResourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Has exactly as many elements as there are cell types.
	NumPieces []int32 `protobuf:"varint,1,rep,packed,name=num_pieces,json=numPieces,proto3" json:"num_pieces,omitempty"`
}

func (x *ResourceInfo) Reset() {
	*x = ResourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceInfo) ProtoMessage() {}

func (x *ResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceInfo.ProtoReflect.Descriptor instead.
func (*ResourceInfo) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{2}
}

func (x *ResourceInfo) GetNumPieces() []int32 {
	if x != nil {
		return x.NumPieces
	}
	return nil
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{3}
}

func (x *Player) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Player) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// GameInfo is summary information about an ongoing game, used to
// display a list of games to the user.
type GameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Host      string                 `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"` // The player hosting the game.
	Started   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=started,proto3" json:"started,omitempty"`
	Type      string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`                             // Expected to match a hexz.GameType value.
	CpuPlayer bool                   `protobuf:"varint,5,opt,name=cpu_player,json=cpuPlayer,proto3" json:"cpu_player,omitempty"` // True if this is a single player game against a CPU player.
}

func (x *GameInfo) Reset() {
	*x = GameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameInfo) ProtoMessage() {}

func (x *GameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameInfo.ProtoReflect.Descriptor instead.
func (*GameInfo) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{4}
}

func (x *GameInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GameInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GameInfo) GetStarted() *timestamppb.Timestamp {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *GameInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GameInfo) GetCpuPlayer() bool {
	if x != nil {
		return x.CpuPlayer
	}
	return false
}

// This message contains all data to restore a game state.
// It can be used to save and load games in a memory store.
type GameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameInfo *GameInfo              `protobuf:"bytes,1,opt,name=game_info,json=gameInfo,proto3" json:"game_info,omitempty"`
	Seqnum   int64                  `protobuf:"varint,2,opt,name=seqnum,proto3" json:"seqnum,omitempty"`
	Modified *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=modified,proto3" json:"modified,omitempty"`
	// Players in this game, in the order they joined.
	Players     []*Player        `protobuf:"bytes,5,rep,name=players,proto3" json:"players,omitempty"`
	EngineState *GameEngineState `protobuf:"bytes,6,opt,name=engine_state,json=engineState,proto3" json:"engine_state,omitempty"`
}

func (x *GameState) Reset() {
	*x = GameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState) ProtoMessage() {}

func (x *GameState) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState.ProtoReflect.Descriptor instead.
func (*GameState) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{5}
}

func (x *GameState) GetGameInfo() *GameInfo {
	if x != nil {
		return x.GameInfo
	}
	return nil
}

func (x *GameState) GetSeqnum() int64 {
	if x != nil {
		return x.Seqnum
	}
	return 0
}

func (x *GameState) GetModified() *timestamppb.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *GameState) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *GameState) GetEngineState() *GameEngineState {
	if x != nil {
		return x.EngineState
	}
	return nil
}

// This message contains all data to restore a game engine state.
// Every GameEngine implementation implements the .Encode() method
// to encode its state into this message.
type GameEngineState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to State:
	//
	//	*GameEngineState_Flagz
	//	*GameEngineState_Classic
	//	*GameEngineState_Freeform
	State isGameEngineState_State `protobuf_oneof:"state"`
}

func (x *GameEngineState) Reset() {
	*x = GameEngineState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEngineState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEngineState) ProtoMessage() {}

func (x *GameEngineState) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEngineState.ProtoReflect.Descriptor instead.
func (*GameEngineState) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{6}
}

func (m *GameEngineState) GetState() isGameEngineState_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (x *GameEngineState) GetFlagz() *GameEngineFlagzState {
	if x, ok := x.GetState().(*GameEngineState_Flagz); ok {
		return x.Flagz
	}
	return nil
}

func (x *GameEngineState) GetClassic() *GameEngineClassicState {
	if x, ok := x.GetState().(*GameEngineState_Classic); ok {
		return x.Classic
	}
	return nil
}

func (x *GameEngineState) GetFreeform() *GameEngineFreeformState {
	if x, ok := x.GetState().(*GameEngineState_Freeform); ok {
		return x.Freeform
	}
	return nil
}

type isGameEngineState_State interface {
	isGameEngineState_State()
}

type GameEngineState_Flagz struct {
	// All game engine types should have one field in this oneof.
	Flagz *GameEngineFlagzState `protobuf:"bytes,1,opt,name=flagz,proto3,oneof"`
}

type GameEngineState_Classic struct {
	Classic *GameEngineClassicState `protobuf:"bytes,2,opt,name=classic,proto3,oneof"`
}

type GameEngineState_Freeform struct {
	Freeform *GameEngineFreeformState `protobuf:"bytes,3,opt,name=freeform,proto3,oneof"`
}

func (*GameEngineState_Flagz) isGameEngineState_State() {}

func (*GameEngineState_Classic) isGameEngineState_State() {}

func (*GameEngineState_Freeform) isGameEngineState_State() {}

// The encoded state of a GameEngineFlagz. Used for saving and loading games.
type GameEngineFlagzState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Board     *Board `protobuf:"bytes,1,opt,name=board,proto3" json:"board,omitempty"`
	FreeCells int32  `protobuf:"varint,2,opt,name=free_cells,json=freeCells,proto3" json:"free_cells,omitempty"`
	// Always exactly two elements, one per player.
	NormalMoves []int32 `protobuf:"varint,3,rep,packed,name=normal_moves,json=normalMoves,proto3" json:"normal_moves,omitempty"`
	// History of moves made so far.
	Moves []*GameEngineMove `protobuf:"bytes,4,rep,name=moves,proto3" json:"moves,omitempty"`
}

func (x *GameEngineFlagzState) Reset() {
	*x = GameEngineFlagzState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEngineFlagzState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEngineFlagzState) ProtoMessage() {}

func (x *GameEngineFlagzState) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEngineFlagzState.ProtoReflect.Descriptor instead.
func (*GameEngineFlagzState) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{7}
}

func (x *GameEngineFlagzState) GetBoard() *Board {
	if x != nil {
		return x.Board
	}
	return nil
}

func (x *GameEngineFlagzState) GetFreeCells() int32 {
	if x != nil {
		return x.FreeCells
	}
	return 0
}

func (x *GameEngineFlagzState) GetNormalMoves() []int32 {
	if x != nil {
		return x.NormalMoves
	}
	return nil
}

func (x *GameEngineFlagzState) GetMoves() []*GameEngineMove {
	if x != nil {
		return x.Moves
	}
	return nil
}

// The encoded state of a GameEngineClassic. Used for saving and loading games.
type GameEngineClassicState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Board *Board `protobuf:"bytes,1,opt,name=board,proto3" json:"board,omitempty"`
}

func (x *GameEngineClassicState) Reset() {
	*x = GameEngineClassicState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEngineClassicState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEngineClassicState) ProtoMessage() {}

func (x *GameEngineClassicState) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEngineClassicState.ProtoReflect.Descriptor instead.
func (*GameEngineClassicState) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{8}
}

func (x *GameEngineClassicState) GetBoard() *Board {
	if x != nil {
		return x.Board
	}
	return nil
}

// The encoded state of a GameEngineFreeform. Used for saving and loading games.
type GameEngineFreeformState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Board *Board `protobuf:"bytes,1,opt,name=board,proto3" json:"board,omitempty"`
}

func (x *GameEngineFreeformState) Reset() {
	*x = GameEngineFreeformState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEngineFreeformState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEngineFreeformState) ProtoMessage() {}

func (x *GameEngineFreeformState) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEngineFreeformState.ProtoReflect.Descriptor instead.
func (*GameEngineFreeformState) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{9}
}

func (x *GameEngineFreeformState) GetBoard() *Board {
	if x != nil {
		return x.Board
	}
	return nil
}

type GameEngineMove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerNum int32          `protobuf:"varint,1,opt,name=player_num,json=playerNum,proto3" json:"player_num,omitempty"`
	Move      int32          `protobuf:"varint,2,opt,name=move,proto3" json:"move,omitempty"`
	Row       int32          `protobuf:"varint,3,opt,name=row,proto3" json:"row,omitempty"`
	Col       int32          `protobuf:"varint,4,opt,name=col,proto3" json:"col,omitempty"`
	CellType  Field_CellType `protobuf:"varint,5,opt,name=cell_type,json=cellType,proto3,enum=hexzpb.Field_CellType" json:"cell_type,omitempty"`
}

func (x *GameEngineMove) Reset() {
	*x = GameEngineMove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEngineMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEngineMove) ProtoMessage() {}

func (x *GameEngineMove) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEngineMove.ProtoReflect.Descriptor instead.
func (*GameEngineMove) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{10}
}

func (x *GameEngineMove) GetPlayerNum() int32 {
	if x != nil {
		return x.PlayerNum
	}
	return 0
}

func (x *GameEngineMove) GetMove() int32 {
	if x != nil {
		return x.Move
	}
	return 0
}

func (x *GameEngineMove) GetRow() int32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *GameEngineMove) GetCol() int32 {
	if x != nil {
		return x.Col
	}
	return 0
}

func (x *GameEngineMove) GetCellType() Field_CellType {
	if x != nil {
		return x.CellType
	}
	return Field_NORMAL
}

// MCTSExample encodes all data that is necessary to generate a training example
// for the NeuraMCTS model.
// Normally, examples would be saved as HDF5 files, but to be facilitate the
// generation of examples in our highly optimized Go implementation, we use
// this message format instead. Python code can transform this into HDF5 files.
type MCTSExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	// The board, at any step in a fully played game.
	Board *Board `protobuf:"bytes,2,opt,name=board,proto3" json:"board,omitempty"`
	// The "value", i.e. the final result of the game. Always has two elements.
	Result    []int32                  `protobuf:"varint,3,rep,packed,name=result,proto3" json:"result,omitempty"`
	MoveStats []*MCTSExample_MoveStats `protobuf:"bytes,4,rep,name=move_stats,json=moveStats,proto3" json:"move_stats,omitempty"`
}

func (x *MCTSExample) Reset() {
	*x = MCTSExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MCTSExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCTSExample) ProtoMessage() {}

func (x *MCTSExample) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCTSExample.ProtoReflect.Descriptor instead.
func (*MCTSExample) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{11}
}

func (x *MCTSExample) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *MCTSExample) GetBoard() *Board {
	if x != nil {
		return x.Board
	}
	return nil
}

func (x *MCTSExample) GetResult() []int32 {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *MCTSExample) GetMoveStats() []*MCTSExample_MoveStats {
	if x != nil {
		return x.MoveStats
	}
	return nil
}

type SuggestMoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum time the engine is allowed to think, in milliseconds.
	MaxThinkTimeMs int64 `protobuf:"varint,1,opt,name=max_think_time_ms,json=maxThinkTimeMs,proto3" json:"max_think_time_ms,omitempty"`
	// Game engine state from which to start thinking.
	GameEngineState *GameEngineState `protobuf:"bytes,2,opt,name=game_engine_state,json=gameEngineState,proto3" json:"game_engine_state,omitempty"`
}

func (x *SuggestMoveRequest) Reset() {
	*x = SuggestMoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestMoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestMoveRequest) ProtoMessage() {}

func (x *SuggestMoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestMoveRequest.ProtoReflect.Descriptor instead.
func (*SuggestMoveRequest) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{12}
}

func (x *SuggestMoveRequest) GetMaxThinkTimeMs() int64 {
	if x != nil {
		return x.MaxThinkTimeMs
	}
	return 0
}

func (x *SuggestMoveRequest) GetGameEngineState() *GameEngineState {
	if x != nil {
		return x.GameEngineState
	}
	return nil
}

type SuggestMoveStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All scores that the agent generated. If not empty, the first element
	// in the sequence MUST be the FINAL score.
	Moves []*SuggestMoveStats_ScoredMove `protobuf:"bytes,1,rep,name=moves,proto3" json:"moves,omitempty"`
	// (Optional) evaluation of the board as a whole: does it look winning (1) or losing (-1)?
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SuggestMoveStats) Reset() {
	*x = SuggestMoveStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestMoveStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestMoveStats) ProtoMessage() {}

func (x *SuggestMoveStats) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestMoveStats.ProtoReflect.Descriptor instead.
func (*SuggestMoveStats) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{13}
}

func (x *SuggestMoveStats) GetMoves() []*SuggestMoveStats_ScoredMove {
	if x != nil {
		return x.Moves
	}
	return nil
}

func (x *SuggestMoveStats) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SuggestMoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Move      *GameEngineMove   `protobuf:"bytes,1,opt,name=move,proto3" json:"move,omitempty"`
	MoveStats *SuggestMoveStats `protobuf:"bytes,2,opt,name=move_stats,json=moveStats,proto3" json:"move_stats,omitempty"`
}

func (x *SuggestMoveResponse) Reset() {
	*x = SuggestMoveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestMoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestMoveResponse) ProtoMessage() {}

func (x *SuggestMoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestMoveResponse.ProtoReflect.Descriptor instead.
func (*SuggestMoveResponse) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{14}
}

func (x *SuggestMoveResponse) GetMove() *GameEngineMove {
	if x != nil {
		return x.Move
	}
	return nil
}

func (x *SuggestMoveResponse) GetMoveStats() *SuggestMoveStats {
	if x != nil {
		return x.MoveStats
	}
	return nil
}

type ModelKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Checkpoint int32  `protobuf:"varint,2,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
}

func (x *ModelKey) Reset() {
	*x = ModelKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelKey) ProtoMessage() {}

func (x *ModelKey) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelKey.ProtoReflect.Descriptor instead.
func (*ModelKey) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{15}
}

func (x *ModelKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelKey) GetCheckpoint() int32 {
	if x != nil {
		return x.Checkpoint
	}
	return 0
}

// Used by workers to upload examples to the training server.
type AddTrainingExamplesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelKey *ModelKey          `protobuf:"bytes,1,opt,name=model_key,json=modelKey,proto3" json:"model_key,omitempty"`
	Examples []*TrainingExample `protobuf:"bytes,2,rep,name=examples,proto3" json:"examples,omitempty"`
	// ID identifying the worker run that generated this example.
	// Typically a random UUID.
	ExecutionId string `protobuf:"bytes,3,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
}

func (x *AddTrainingExamplesRequest) Reset() {
	*x = AddTrainingExamplesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTrainingExamplesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTrainingExamplesRequest) ProtoMessage() {}

func (x *AddTrainingExamplesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTrainingExamplesRequest.ProtoReflect.Descriptor instead.
func (*AddTrainingExamplesRequest) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{16}
}

func (x *AddTrainingExamplesRequest) GetModelKey() *ModelKey {
	if x != nil {
		return x.ModelKey
	}
	return nil
}

func (x *AddTrainingExamplesRequest) GetExamples() []*TrainingExample {
	if x != nil {
		return x.Examples
	}
	return nil
}

func (x *AddTrainingExamplesRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

type AddTrainingExamplesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status AddTrainingExamplesResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=hexzpb.AddTrainingExamplesResponse_Status" json:"status,omitempty"`
	// Tells the worker which model to use for subsequent requests.
	LatestModel *ModelKey `protobuf:"bytes,2,opt,name=latest_model,json=latestModel,proto3" json:"latest_model,omitempty"`
	// Populated if there was an error processing the request.
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *AddTrainingExamplesResponse) Reset() {
	*x = AddTrainingExamplesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTrainingExamplesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTrainingExamplesResponse) ProtoMessage() {}

func (x *AddTrainingExamplesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTrainingExamplesResponse.ProtoReflect.Descriptor instead.
func (*AddTrainingExamplesResponse) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{17}
}

func (x *AddTrainingExamplesResponse) GetStatus() AddTrainingExamplesResponse_Status {
	if x != nil {
		return x.Status
	}
	return AddTrainingExamplesResponse_STATUS_UNSPECIFIED
}

func (x *AddTrainingExamplesResponse) GetLatestModel() *ModelKey {
	if x != nil {
		return x.LatestModel
	}
	return nil
}

func (x *AddTrainingExamplesResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// TrainingExample is used to send training examples across the wire and store
// them on disk in the Python implementation.
type TrainingExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp at which this example was generated.
	UnixMicros int64 `protobuf:"varint,1,opt,name=unix_micros,json=unixMicros,proto3" json:"unix_micros,omitempty"`
	// The player whose turn it was (the current player).
	Turn int32 `protobuf:"varint,7,opt,name=turn,proto3" json:"turn,omitempty"`
	// The move that was made during self-play.
	Move     *GameEngineMove          `protobuf:"bytes,9,opt,name=move,proto3" json:"move,omitempty"`
	Encoding TrainingExample_Encoding `protobuf:"varint,6,opt,name=encoding,proto3,enum=hexzpb.TrainingExample_Encoding" json:"encoding,omitempty"`
	// Training inputs.
	//
	// Encoded array containing the (11, 11, 10) Board from the view of the current player.
	// Serialized to bytes using np.save or torch::pickle_save.
	Board []byte `protobuf:"bytes,2,opt,name=board,proto3" json:"board,omitempty"`
	// Encoded array containing the (2, 11, 10) action mask indicating which moves
	// are valid on the given board.
	ActionMask []byte `protobuf:"bytes,8,opt,name=action_mask,json=actionMask,proto3" json:"action_mask,omitempty"`
	// Training labels.
	//
	// Encoded array containing the (2, 11, 10) move likelihoods.
	// Serialized to bytes using np.save or torch::pickle_save.
	MoveProbs []byte `protobuf:"bytes,3,opt,name=move_probs,json=moveProbs,proto3" json:"move_probs,omitempty"`
	// The outcome of the game, from the perspective of the current player:
	// -1: lost, 0: draw, 1: won
	Result           float32                           `protobuf:"fixed32,4,opt,name=result,proto3" json:"result,omitempty"`
	ModelPredictions *TrainingExample_ModelPredictions `protobuf:"bytes,10,opt,name=model_predictions,json=modelPredictions,proto3" json:"model_predictions,omitempty"`
	Stats            *TrainingExample_Stats            `protobuf:"bytes,5,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *TrainingExample) Reset() {
	*x = TrainingExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingExample) ProtoMessage() {}

func (x *TrainingExample) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainingExample.ProtoReflect.Descriptor instead.
func (*TrainingExample) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{18}
}

func (x *TrainingExample) GetUnixMicros() int64 {
	if x != nil {
		return x.UnixMicros
	}
	return 0
}

func (x *TrainingExample) GetTurn() int32 {
	if x != nil {
		return x.Turn
	}
	return 0
}

func (x *TrainingExample) GetMove() *GameEngineMove {
	if x != nil {
		return x.Move
	}
	return nil
}

func (x *TrainingExample) GetEncoding() TrainingExample_Encoding {
	if x != nil {
		return x.Encoding
	}
	return TrainingExample_NUMPY
}

func (x *TrainingExample) GetBoard() []byte {
	if x != nil {
		return x.Board
	}
	return nil
}

func (x *TrainingExample) GetActionMask() []byte {
	if x != nil {
		return x.ActionMask
	}
	return nil
}

func (x *TrainingExample) GetMoveProbs() []byte {
	if x != nil {
		return x.MoveProbs
	}
	return nil
}

func (x *TrainingExample) GetResult() float32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *TrainingExample) GetModelPredictions() *TrainingExample_ModelPredictions {
	if x != nil {
		return x.ModelPredictions
	}
	return nil
}

func (x *TrainingExample) GetStats() *TrainingExample_Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// The learnt "policy", i.e. the MCTS visit counts and win rates for each move.
type MCTSExample_MoveStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Move    *GameEngineMove `protobuf:"bytes,1,opt,name=move,proto3" json:"move,omitempty"`
	Visits  int32           `protobuf:"varint,2,opt,name=visits,proto3" json:"visits,omitempty"`
	WinRate float32         `protobuf:"fixed32,3,opt,name=win_rate,json=winRate,proto3" json:"win_rate,omitempty"`
}

func (x *MCTSExample_MoveStats) Reset() {
	*x = MCTSExample_MoveStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MCTSExample_MoveStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCTSExample_MoveStats) ProtoMessage() {}

func (x *MCTSExample_MoveStats) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCTSExample_MoveStats.ProtoReflect.Descriptor instead.
func (*MCTSExample_MoveStats) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{11, 0}
}

func (x *MCTSExample_MoveStats) GetMove() *GameEngineMove {
	if x != nil {
		return x.Move
	}
	return nil
}

func (x *MCTSExample_MoveStats) GetVisits() int32 {
	if x != nil {
		return x.Visits
	}
	return 0
}

func (x *MCTSExample_MoveStats) GetWinRate() float32 {
	if x != nil {
		return x.WinRate
	}
	return 0
}

type SuggestMoveStats_Score struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind  SuggestMoveStats_ScoreKind `protobuf:"varint,1,opt,name=kind,proto3,enum=hexzpb.SuggestMoveStats_ScoreKind" json:"kind,omitempty"`
	Score float32                    `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *SuggestMoveStats_Score) Reset() {
	*x = SuggestMoveStats_Score{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestMoveStats_Score) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestMoveStats_Score) ProtoMessage() {}

func (x *SuggestMoveStats_Score) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestMoveStats_Score.ProtoReflect.Descriptor instead.
func (*SuggestMoveStats_Score) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{13, 0}
}

func (x *SuggestMoveStats_Score) GetKind() SuggestMoveStats_ScoreKind {
	if x != nil {
		return x.Kind
	}
	return SuggestMoveStats_FINAL
}

func (x *SuggestMoveStats_Score) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type SuggestMoveStats_ScoredMove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row  int32          `protobuf:"varint,1,opt,name=row,proto3" json:"row,omitempty"`
	Col  int32          `protobuf:"varint,2,opt,name=col,proto3" json:"col,omitempty"`
	Type Field_CellType `protobuf:"varint,3,opt,name=type,proto3,enum=hexzpb.Field_CellType" json:"type,omitempty"`
	// Should be between [0..1] and indicate the likelihood of choosing this move.
	Scores []*SuggestMoveStats_Score `protobuf:"bytes,4,rep,name=scores,proto3" json:"scores,omitempty"`
}

func (x *SuggestMoveStats_ScoredMove) Reset() {
	*x = SuggestMoveStats_ScoredMove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestMoveStats_ScoredMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestMoveStats_ScoredMove) ProtoMessage() {}

func (x *SuggestMoveStats_ScoredMove) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestMoveStats_ScoredMove.ProtoReflect.Descriptor instead.
func (*SuggestMoveStats_ScoredMove) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{13, 1}
}

func (x *SuggestMoveStats_ScoredMove) GetRow() int32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *SuggestMoveStats_ScoredMove) GetCol() int32 {
	if x != nil {
		return x.Col
	}
	return 0
}

func (x *SuggestMoveStats_ScoredMove) GetType() Field_CellType {
	if x != nil {
		return x.Type
	}
	return Field_NORMAL
}

func (x *SuggestMoveStats_ScoredMove) GetScores() []*SuggestMoveStats_Score {
	if x != nil {
		return x.Scores
	}
	return nil
}

// Model outputs during self-play.
type TrainingExample_ModelPredictions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Encoded array containing the (2, 11, 10) prior move probabilities as predicted
	// by the model. If enabled, contains the added Dirichlet noise, i.e., these
	// priors were used for the neural MCTS runs.
	Priors []byte  `protobuf:"bytes,1,opt,name=priors,proto3" json:"priors,omitempty"`
	Value  float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TrainingExample_ModelPredictions) Reset() {
	*x = TrainingExample_ModelPredictions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingExample_ModelPredictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingExample_ModelPredictions) ProtoMessage() {}

func (x *TrainingExample_ModelPredictions) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainingExample_ModelPredictions.ProtoReflect.Descriptor instead.
func (*TrainingExample_ModelPredictions) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{18, 0}
}

func (x *TrainingExample_ModelPredictions) GetPriors() []byte {
	if x != nil {
		return x.Priors
	}
	return nil
}

func (x *TrainingExample_ModelPredictions) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type TrainingExample_Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time it took to generate this example (i.e., to generate the corresponding
	// neural MCTS move suggestion).
	DurationMicros int64 `protobuf:"varint,1,opt,name=duration_micros,json=durationMicros,proto3" json:"duration_micros,omitempty"`
	// Number of valid moves (equal to the number of root child nodes).
	ValidMoves int32 `protobuf:"varint,2,opt,name=valid_moves,json=validMoves,proto3" json:"valid_moves,omitempty"`
	// Times that the root node was visited.
	VisitCount int32 `protobuf:"varint,3,opt,name=visit_count,json=visitCount,proto3" json:"visit_count,omitempty"`
	// Child nodes of the root node that were visited at least once.
	VisitedChildren int32 `protobuf:"varint,4,opt,name=visited_children,json=visitedChildren,proto3" json:"visited_children,omitempty"`
	// Maximum depth of the search tree. The root node has depth 0.
	SearchDepth int32 `protobuf:"varint,5,opt,name=search_depth,json=searchDepth,proto3" json:"search_depth,omitempty"`
	// Total number of nodes in the search tree, including leaves.
	SearchTreeSize int32 `protobuf:"varint,6,opt,name=search_tree_size,json=searchTreeSize,proto3" json:"search_tree_size,omitempty"`
	// Number of non-leaf nodes in the tree, i.e. those visited at least once.
	BranchNodes int32 `protobuf:"varint,7,opt,name=branch_nodes,json=branchNodes,proto3" json:"branch_nodes,omitempty"`
	// Min/max visit counts of the root node's children.
	MinChildVc int32 `protobuf:"varint,8,opt,name=min_child_vc,json=minChildVc,proto3" json:"min_child_vc,omitempty"`
	MaxChildVc int32 `protobuf:"varint,9,opt,name=max_child_vc,json=maxChildVc,proto3" json:"max_child_vc,omitempty"`
	// The Q-value of the selected child node, i.e. wins/visit_count.
	SelectedChildQ int32 `protobuf:"varint,13,opt,name=selected_child_q,json=selectedChildQ,proto3" json:"selected_child_q,omitempty"`
	// The visit count of the selected child node.
	SelectedChildVc int32 `protobuf:"varint,10,opt,name=selected_child_vc,json=selectedChildVc,proto3" json:"selected_child_vc,omitempty"`
	// Number of nodes per depth level in the tree.
	NodesPerDepth []int32 `protobuf:"varint,12,rep,packed,name=nodes_per_depth,json=nodesPerDepth,proto3" json:"nodes_per_depth,omitempty"`
}

func (x *TrainingExample_Stats) Reset() {
	*x = TrainingExample_Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hexzpb_hexz_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingExample_Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingExample_Stats) ProtoMessage() {}

func (x *TrainingExample_Stats) ProtoReflect() protoreflect.Message {
	mi := &file_hexzpb_hexz_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainingExample_Stats.ProtoReflect.Descriptor instead.
func (*TrainingExample_Stats) Descriptor() ([]byte, []int) {
	return file_hexzpb_hexz_proto_rawDescGZIP(), []int{18, 1}
}

func (x *TrainingExample_Stats) GetDurationMicros() int64 {
	if x != nil {
		return x.DurationMicros
	}
	return 0
}

func (x *TrainingExample_Stats) GetValidMoves() int32 {
	if x != nil {
		return x.ValidMoves
	}
	return 0
}

func (x *TrainingExample_Stats) GetVisitCount() int32 {
	if x != nil {
		return x.VisitCount
	}
	return 0
}

func (x *TrainingExample_Stats) GetVisitedChildren() int32 {
	if x != nil {
		return x.VisitedChildren
	}
	return 0
}

func (x *TrainingExample_Stats) GetSearchDepth() int32 {
	if x != nil {
		return x.SearchDepth
	}
	return 0
}

func (x *TrainingExample_Stats) GetSearchTreeSize() int32 {
	if x != nil {
		return x.SearchTreeSize
	}
	return 0
}

func (x *TrainingExample_Stats) GetBranchNodes() int32 {
	if x != nil {
		return x.BranchNodes
	}
	return 0
}

func (x *TrainingExample_Stats) GetMinChildVc() int32 {
	if x != nil {
		return x.MinChildVc
	}
	return 0
}

func (x *TrainingExample_Stats) GetMaxChildVc() int32 {
	if x != nil {
		return x.MaxChildVc
	}
	return 0
}

func (x *TrainingExample_Stats) GetSelectedChildQ() int32 {
	if x != nil {
		return x.SelectedChildQ
	}
	return 0
}

func (x *TrainingExample_Stats) GetSelectedChildVc() int32 {
	if x != nil {
		return x.SelectedChildVc
	}
	return 0
}

func (x *TrainingExample_Stats) GetNodesPerDepth() []int32 {
	if x != nil {
		return x.NodesPerDepth
	}
	return nil
}

var File_hexzpb_hexz_proto protoreflect.FileDescriptor

var file_hexzpb_hexz_proto_rawDesc = []byte{
	0x0a, 0x11, 0x68, 0x65, 0x78, 0x7a, 0x70, 0x62, 0x2f, 0x68, 0x65, 0x78, 0x7a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x68, 0x65, 0x78, 0x7a, 0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x02, 0x0a,
	0x05, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x76, 0x65, 0x61,
	0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68,
	0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x68,
	0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x33, 0x0a, 0x09,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10,
	0x02, 0x22, 0xa8, 0x02, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x78, 0x7a,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x22, 0x5e, 0x0a, 0x08,
	0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x47, 0x52, 0x41, 0x53, 0x53, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x4f, 0x43,
	0x4b, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x52, 0x45, 0x10, 0x04, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x4c, 0x41, 0x47, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x45, 0x53, 0x54, 0x10,
	0x06, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x41, 0x54, 0x48, 0x10, 0x07, 0x22, 0x2d, 0x0a, 0x0c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x09, 0x6e, 0x75, 0x6d, 0x50, 0x69, 0x65, 0x63, 0x65, 0x73, 0x22, 0x2c, 0x0a, 0x06, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x08, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x70, 0x75, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x22, 0xf0, 0x01, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2d, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x28, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x78, 0x7a,
	0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x7a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x7a,
	0x12, 0x3a, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x12, 0x3d, 0x0a, 0x08,
	0x66, 0x72, 0x65, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x46, 0x72, 0x65, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x14, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x7a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a,
	0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68,
	0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x05, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x43, 0x65, 0x6c, 0x6c,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x76, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d,
	0x6f, 0x76, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x76,
	0x65, 0x73, 0x22, 0x3d, 0x0a, 0x16, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x05,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65,
	0x78, 0x7a, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x05, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x22, 0x3e, 0x0a, 0x17, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x46,
	0x72, 0x65, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x05,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65,
	0x78, 0x7a, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x05, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x4d, 0x6f, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6f, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x6f, 0x6c, 0x12, 0x33, 0x0a, 0x09, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x8d, 0x02, 0x0a, 0x0b, 0x4d, 0x43, 0x54, 0x53, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70,
	0x62, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x65, 0x78,
	0x7a, 0x70, 0x62, 0x2e, 0x4d, 0x43, 0x54, 0x53, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x4d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x6d, 0x6f, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x1a, 0x6a, 0x0a, 0x09, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x69, 0x73, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76,
	0x69, 0x73, 0x69, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x22, 0x84, 0x01, 0x0a, 0x12, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x68, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x54, 0x68, 0x69, 0x6e, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x73, 0x12, 0x43, 0x0a, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x68, 0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xf9, 0x02, 0x0a, 0x10, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x05,
	0x6d, 0x6f, 0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65,
	0x78, 0x7a, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x65,
	0x52, 0x05, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x55, 0x0a,
	0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x1a, 0x94, 0x01, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x4d,
	0x6f, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x63, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x09, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x4e, 0x41,
	0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x43, 0x54, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x10, 0x01, 0x22, 0x7a, 0x0a, 0x13, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4d, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x6f,
	0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70,
	0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x76, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x78,
	0x7a, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22,
	0x3e, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22,
	0xa3, 0x01, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x45,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4b, 0x65, 0x79, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a,
	0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb3, 0x02, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x41,
	0x64, 0x64, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x0c, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4b, 0x65,
	0x79, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x76, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f,
	0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x5f, 0x43, 0x41, 0x50,
	0x41, 0x43, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x22, 0xe2, 0x07, 0x0a, 0x0f,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x78, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x75, 0x72, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x76, 0x65,
	0x12, 0x3c, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x6f, 0x76, 0x65, 0x50,
	0x72, 0x6f, 0x62, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x55, 0x0a, 0x11,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70, 0x62,
	0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x65, 0x78, 0x7a, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x40, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xcf, 0x03, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54,
	0x72, 0x65, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x69,
	0x6e, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x76, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x56, 0x63, 0x12, 0x20, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x76, 0x63, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x56, 0x63, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x71, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x51, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x76, 0x63, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x56, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x50, 0x65, 0x72, 0x44, 0x65, 0x70, 0x74, 0x68, 0x22, 0x22, 0x0a, 0x08,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x55, 0x4d, 0x50,
	0x59, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x59, 0x54, 0x4f, 0x52, 0x43, 0x48, 0x10, 0x01,
	0x42, 0x1f, 0x5a, 0x1d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x6e, 0x73, 0x77, 0x6c, 0x74, 0x2f, 0x68, 0x65, 0x78, 0x7a, 0x2f, 0x68, 0x65, 0x78, 0x7a, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hexzpb_hexz_proto_rawDescOnce sync.Once
	file_hexzpb_hexz_proto_rawDescData = file_hexzpb_hexz_proto_rawDesc
)

func file_hexzpb_hexz_proto_rawDescGZIP() []byte {
	file_hexzpb_hexz_proto_rawDescOnce.Do(func() {
		file_hexzpb_hexz_proto_rawDescData = protoimpl.X.CompressGZIP(file_hexzpb_hexz_proto_rawDescData)
	})
	return file_hexzpb_hexz_proto_rawDescData
}

var file_hexzpb_hexz_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_hexzpb_hexz_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_hexzpb_hexz_proto_goTypes = []interface{}{
	(Board_GameState)(0),                     // 0: hexzpb.Board.GameState
	(Field_CellType)(0),                      // 1: hexzpb.Field.CellType
	(SuggestMoveStats_ScoreKind)(0),          // 2: hexzpb.SuggestMoveStats.ScoreKind
	(AddTrainingExamplesResponse_Status)(0),  // 3: hexzpb.AddTrainingExamplesResponse.Status
	(TrainingExample_Encoding)(0),            // 4: hexzpb.TrainingExample.Encoding
	(*Board)(nil),                            // 5: hexzpb.Board
	(*Field)(nil),                            // 6: hexzpb.Field
	(*ResourceInfo)(nil),                     // 7: hexzpb.ResourceInfo
	(*Player)(nil),                           // 8: hexzpb.Player
	(*GameInfo)(nil),                         // 9: hexzpb.GameInfo
	(*GameState)(nil),                        // 10: hexzpb.GameState
	(*GameEngineState)(nil),                  // 11: hexzpb.GameEngineState
	(*GameEngineFlagzState)(nil),             // 12: hexzpb.GameEngineFlagzState
	(*GameEngineClassicState)(nil),           // 13: hexzpb.GameEngineClassicState
	(*GameEngineFreeformState)(nil),          // 14: hexzpb.GameEngineFreeformState
	(*GameEngineMove)(nil),                   // 15: hexzpb.GameEngineMove
	(*MCTSExample)(nil),                      // 16: hexzpb.MCTSExample
	(*SuggestMoveRequest)(nil),               // 17: hexzpb.SuggestMoveRequest
	(*SuggestMoveStats)(nil),                 // 18: hexzpb.SuggestMoveStats
	(*SuggestMoveResponse)(nil),              // 19: hexzpb.SuggestMoveResponse
	(*ModelKey)(nil),                         // 20: hexzpb.ModelKey
	(*AddTrainingExamplesRequest)(nil),       // 21: hexzpb.AddTrainingExamplesRequest
	(*AddTrainingExamplesResponse)(nil),      // 22: hexzpb.AddTrainingExamplesResponse
	(*TrainingExample)(nil),                  // 23: hexzpb.TrainingExample
	(*MCTSExample_MoveStats)(nil),            // 24: hexzpb.MCTSExample.MoveStats
	(*SuggestMoveStats_Score)(nil),           // 25: hexzpb.SuggestMoveStats.Score
	(*SuggestMoveStats_ScoredMove)(nil),      // 26: hexzpb.SuggestMoveStats.ScoredMove
	(*TrainingExample_ModelPredictions)(nil), // 27: hexzpb.TrainingExample.ModelPredictions
	(*TrainingExample_Stats)(nil),            // 28: hexzpb.TrainingExample.Stats
	(*timestamppb.Timestamp)(nil),            // 29: google.protobuf.Timestamp
}
var file_hexzpb_hexz_proto_depIdxs = []int32{
	6,  // 0: hexzpb.Board.flat_fields:type_name -> hexzpb.Field
	7,  // 1: hexzpb.Board.resources:type_name -> hexzpb.ResourceInfo
	0,  // 2: hexzpb.Board.state:type_name -> hexzpb.Board.GameState
	1,  // 3: hexzpb.Field.type:type_name -> hexzpb.Field.CellType
	29, // 4: hexzpb.GameInfo.started:type_name -> google.protobuf.Timestamp
	9,  // 5: hexzpb.GameState.game_info:type_name -> hexzpb.GameInfo
	29, // 6: hexzpb.GameState.modified:type_name -> google.protobuf.Timestamp
	8,  // 7: hexzpb.GameState.players:type_name -> hexzpb.Player
	11, // 8: hexzpb.GameState.engine_state:type_name -> hexzpb.GameEngineState
	12, // 9: hexzpb.GameEngineState.flagz:type_name -> hexzpb.GameEngineFlagzState
	13, // 10: hexzpb.GameEngineState.classic:type_name -> hexzpb.GameEngineClassicState
	14, // 11: hexzpb.GameEngineState.freeform:type_name -> hexzpb.GameEngineFreeformState
	5,  // 12: hexzpb.GameEngineFlagzState.board:type_name -> hexzpb.Board
	15, // 13: hexzpb.GameEngineFlagzState.moves:type_name -> hexzpb.GameEngineMove
	5,  // 14: hexzpb.GameEngineClassicState.board:type_name -> hexzpb.Board
	5,  // 15: hexzpb.GameEngineFreeformState.board:type_name -> hexzpb.Board
	1,  // 16: hexzpb.GameEngineMove.cell_type:type_name -> hexzpb.Field.CellType
	5,  // 17: hexzpb.MCTSExample.board:type_name -> hexzpb.Board
	24, // 18: hexzpb.MCTSExample.move_stats:type_name -> hexzpb.MCTSExample.MoveStats
	11, // 19: hexzpb.SuggestMoveRequest.game_engine_state:type_name -> hexzpb.GameEngineState
	26, // 20: hexzpb.SuggestMoveStats.moves:type_name -> hexzpb.SuggestMoveStats.ScoredMove
	15, // 21: hexzpb.SuggestMoveResponse.move:type_name -> hexzpb.GameEngineMove
	18, // 22: hexzpb.SuggestMoveResponse.move_stats:type_name -> hexzpb.SuggestMoveStats
	20, // 23: hexzpb.AddTrainingExamplesRequest.model_key:type_name -> hexzpb.ModelKey
	23, // 24: hexzpb.AddTrainingExamplesRequest.examples:type_name -> hexzpb.TrainingExample
	3,  // 25: hexzpb.AddTrainingExamplesResponse.status:type_name -> hexzpb.AddTrainingExamplesResponse.Status
	20, // 26: hexzpb.AddTrainingExamplesResponse.latest_model:type_name -> hexzpb.ModelKey
	15, // 27: hexzpb.TrainingExample.move:type_name -> hexzpb.GameEngineMove
	4,  // 28: hexzpb.TrainingExample.encoding:type_name -> hexzpb.TrainingExample.Encoding
	27, // 29: hexzpb.TrainingExample.model_predictions:type_name -> hexzpb.TrainingExample.ModelPredictions
	28, // 30: hexzpb.TrainingExample.stats:type_name -> hexzpb.TrainingExample.Stats
	15, // 31: hexzpb.MCTSExample.MoveStats.move:type_name -> hexzpb.GameEngineMove
	2,  // 32: hexzpb.SuggestMoveStats.Score.kind:type_name -> hexzpb.SuggestMoveStats.ScoreKind
	1,  // 33: hexzpb.SuggestMoveStats.ScoredMove.type:type_name -> hexzpb.Field.CellType
	25, // 34: hexzpb.SuggestMoveStats.ScoredMove.scores:type_name -> hexzpb.SuggestMoveStats.Score
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_hexzpb_hexz_proto_init() }
func file_hexzpb_hexz_proto_init() {
	if File_hexzpb_hexz_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hexzpb_hexz_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Board); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEngineState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEngineFlagzState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEngineClassicState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEngineFreeformState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEngineMove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MCTSExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestMoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestMoveStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestMoveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTrainingExamplesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTrainingExamplesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MCTSExample_MoveStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestMoveStats_Score); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestMoveStats_ScoredMove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingExample_ModelPredictions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hexzpb_hexz_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingExample_Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_hexzpb_hexz_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*GameEngineState_Flagz)(nil),
		(*GameEngineState_Classic)(nil),
		(*GameEngineState_Freeform)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hexzpb_hexz_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hexzpb_hexz_proto_goTypes,
		DependencyIndexes: file_hexzpb_hexz_proto_depIdxs,
		EnumInfos:         file_hexzpb_hexz_proto_enumTypes,
		MessageInfos:      file_hexzpb_hexz_proto_msgTypes,
	}.Build()
	File_hexzpb_hexz_proto = out.File
	file_hexzpb_hexz_proto_rawDesc = nil
	file_hexzpb_hexz_proto_goTypes = nil
	file_hexzpb_hexz_proto_depIdxs = nil
}
