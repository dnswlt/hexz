// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hexz.proto

#include "hexz.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace hexzpb {
        template <typename>
PROTOBUF_CONSTEXPR Board::Board(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.flat_fields_)*/ {},
      /*decltype(_impl_.score_)*/ {},
      /* _impl_._score_cached_byte_size_ = */ {0},
      /*decltype(_impl_.resources_)*/ {},
      /*decltype(_impl_.turn_)*/ 0,
      /*decltype(_impl_.move_)*/ 0,
      /*decltype(_impl_.last_revealed_)*/ 0,
      /*decltype(_impl_.state_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct BoardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoardDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoardDefaultTypeInternal() {}
  union {
    Board _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoardDefaultTypeInternal _Board_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Field::Field(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.next_val_)*/ {},
      /* _impl_._next_val_cached_byte_size_ = */ {0},
      /*decltype(_impl_.type_)*/ 0,
      /*decltype(_impl_.owner_)*/ 0,
      /*decltype(_impl_.hidden_)*/ false,
      /*decltype(_impl_.value_)*/ 0,
      /*decltype(_impl_.blocked_)*/ 0,
      /*decltype(_impl_.lifetime_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct FieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FieldDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FieldDefaultTypeInternal() {}
  union {
    Field _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FieldDefaultTypeInternal _Field_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ResourceInfo::ResourceInfo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.num_pieces_)*/ {},
      /* _impl_._num_pieces_cached_byte_size_ = */ {0},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ResourceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceInfoDefaultTypeInternal() {}
  union {
    ResourceInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceInfoDefaultTypeInternal _ResourceInfo_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Player::Player(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDefaultTypeInternal() {}
  union {
    Player _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDefaultTypeInternal _Player_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GameInfo::GameInfo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.host_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.type_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.started_)*/ nullptr,
      /*decltype(_impl_.cpu_player_)*/ false,
    } {}
struct GameInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameInfoDefaultTypeInternal() {}
  union {
    GameInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameInfoDefaultTypeInternal _GameInfo_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GameState::GameState(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.players_)*/ {},
      /*decltype(_impl_.game_info_)*/ nullptr,
      /*decltype(_impl_.modified_)*/ nullptr,
      /*decltype(_impl_.engine_state_)*/ nullptr,
      /*decltype(_impl_.seqnum_)*/ ::int64_t{0},
    } {}
struct GameStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStateDefaultTypeInternal() {}
  union {
    GameState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStateDefaultTypeInternal _GameState_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GameEngineState::GameEngineState(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.state_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct GameEngineStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEngineStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEngineStateDefaultTypeInternal() {}
  union {
    GameEngineState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEngineStateDefaultTypeInternal _GameEngineState_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GameEngineFlagzState::GameEngineFlagzState(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.normal_moves_)*/ {},
      /* _impl_._normal_moves_cached_byte_size_ = */ {0},
      /*decltype(_impl_.moves_)*/ {},
      /*decltype(_impl_.board_)*/ nullptr,
      /*decltype(_impl_.free_cells_)*/ 0,
    } {}
struct GameEngineFlagzStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEngineFlagzStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEngineFlagzStateDefaultTypeInternal() {}
  union {
    GameEngineFlagzState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEngineFlagzStateDefaultTypeInternal _GameEngineFlagzState_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GameEngineClassicState::GameEngineClassicState(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.board_)*/ nullptr,
    } {}
struct GameEngineClassicStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEngineClassicStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEngineClassicStateDefaultTypeInternal() {}
  union {
    GameEngineClassicState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEngineClassicStateDefaultTypeInternal _GameEngineClassicState_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GameEngineFreeformState::GameEngineFreeformState(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.board_)*/ nullptr,
    } {}
struct GameEngineFreeformStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEngineFreeformStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEngineFreeformStateDefaultTypeInternal() {}
  union {
    GameEngineFreeformState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEngineFreeformStateDefaultTypeInternal _GameEngineFreeformState_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GameEngineMove::GameEngineMove(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.player_num_)*/ 0,
      /*decltype(_impl_.move_)*/ 0,
      /*decltype(_impl_.row_)*/ 0,
      /*decltype(_impl_.col_)*/ 0,
      /*decltype(_impl_.cell_type_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct GameEngineMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEngineMoveDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEngineMoveDefaultTypeInternal() {}
  union {
    GameEngineMove _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEngineMoveDefaultTypeInternal _GameEngineMove_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MCTSExample_MoveStats::MCTSExample_MoveStats(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.move_)*/ nullptr,
      /*decltype(_impl_.visits_)*/ 0,
      /*decltype(_impl_.win_rate_)*/ 0,
    } {}
struct MCTSExample_MoveStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MCTSExample_MoveStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MCTSExample_MoveStatsDefaultTypeInternal() {}
  union {
    MCTSExample_MoveStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MCTSExample_MoveStatsDefaultTypeInternal _MCTSExample_MoveStats_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MCTSExample::MCTSExample(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.result_)*/ {},
      /* _impl_._result_cached_byte_size_ = */ {0},
      /*decltype(_impl_.move_stats_)*/ {},
      /*decltype(_impl_.game_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.board_)*/ nullptr,
    } {}
struct MCTSExampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MCTSExampleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MCTSExampleDefaultTypeInternal() {}
  union {
    MCTSExample _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MCTSExampleDefaultTypeInternal _MCTSExample_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SuggestMoveRequest::SuggestMoveRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.game_engine_state_)*/ nullptr,
      /*decltype(_impl_.max_think_time_ms_)*/ ::int64_t{0},
    } {}
struct SuggestMoveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SuggestMoveRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SuggestMoveRequestDefaultTypeInternal() {}
  union {
    SuggestMoveRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SuggestMoveRequestDefaultTypeInternal _SuggestMoveRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SuggestMoveStats_Score::SuggestMoveStats_Score(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.kind_)*/ 0,
      /*decltype(_impl_.score_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SuggestMoveStats_ScoreDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SuggestMoveStats_ScoreDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SuggestMoveStats_ScoreDefaultTypeInternal() {}
  union {
    SuggestMoveStats_Score _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SuggestMoveStats_ScoreDefaultTypeInternal _SuggestMoveStats_Score_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SuggestMoveStats_ScoredMove::SuggestMoveStats_ScoredMove(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.scores_)*/ {},
      /*decltype(_impl_.row_)*/ 0,
      /*decltype(_impl_.col_)*/ 0,
      /*decltype(_impl_.type_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SuggestMoveStats_ScoredMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SuggestMoveStats_ScoredMoveDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SuggestMoveStats_ScoredMoveDefaultTypeInternal() {}
  union {
    SuggestMoveStats_ScoredMove _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SuggestMoveStats_ScoredMoveDefaultTypeInternal _SuggestMoveStats_ScoredMove_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SuggestMoveStats::SuggestMoveStats(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.moves_)*/ {},
      /*decltype(_impl_.value_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SuggestMoveStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SuggestMoveStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SuggestMoveStatsDefaultTypeInternal() {}
  union {
    SuggestMoveStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SuggestMoveStatsDefaultTypeInternal _SuggestMoveStats_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SuggestMoveResponse::SuggestMoveResponse(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.move_)*/ nullptr,
      /*decltype(_impl_.move_stats_)*/ nullptr,
    } {}
struct SuggestMoveResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SuggestMoveResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SuggestMoveResponseDefaultTypeInternal() {}
  union {
    SuggestMoveResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SuggestMoveResponseDefaultTypeInternal _SuggestMoveResponse_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ModelKey::ModelKey(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.checkpoint_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ModelKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelKeyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelKeyDefaultTypeInternal() {}
  union {
    ModelKey _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelKeyDefaultTypeInternal _ModelKey_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AddTrainingExamplesRequest::AddTrainingExamplesRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.examples_)*/ {},
      /*decltype(_impl_.execution_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.model_key_)*/ nullptr,
    } {}
struct AddTrainingExamplesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddTrainingExamplesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddTrainingExamplesRequestDefaultTypeInternal() {}
  union {
    AddTrainingExamplesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddTrainingExamplesRequestDefaultTypeInternal _AddTrainingExamplesRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AddTrainingExamplesResponse::AddTrainingExamplesResponse(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.error_message_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.latest_model_)*/ nullptr,
      /*decltype(_impl_.status_)*/ 0,
    } {}
struct AddTrainingExamplesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddTrainingExamplesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddTrainingExamplesResponseDefaultTypeInternal() {}
  union {
    AddTrainingExamplesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddTrainingExamplesResponseDefaultTypeInternal _AddTrainingExamplesResponse_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TrainingExample_ModelPredictions::TrainingExample_ModelPredictions(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.priors_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.value_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TrainingExample_ModelPredictionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrainingExample_ModelPredictionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrainingExample_ModelPredictionsDefaultTypeInternal() {}
  union {
    TrainingExample_ModelPredictions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrainingExample_ModelPredictionsDefaultTypeInternal _TrainingExample_ModelPredictions_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TrainingExample_Stats::TrainingExample_Stats(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.nodes_per_depth_)*/ {},
      /* _impl_._nodes_per_depth_cached_byte_size_ = */ {0},
      /*decltype(_impl_.duration_micros_)*/ ::int64_t{0},
      /*decltype(_impl_.valid_moves_)*/ 0,
      /*decltype(_impl_.visit_count_)*/ 0,
      /*decltype(_impl_.visited_children_)*/ 0,
      /*decltype(_impl_.search_depth_)*/ 0,
      /*decltype(_impl_.search_tree_size_)*/ 0,
      /*decltype(_impl_.branch_nodes_)*/ 0,
      /*decltype(_impl_.min_child_vc_)*/ 0,
      /*decltype(_impl_.max_child_vc_)*/ 0,
      /*decltype(_impl_.selected_child_vc_)*/ 0,
      /*decltype(_impl_.selected_child_q_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TrainingExample_StatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrainingExample_StatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrainingExample_StatsDefaultTypeInternal() {}
  union {
    TrainingExample_Stats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrainingExample_StatsDefaultTypeInternal _TrainingExample_Stats_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TrainingExample::TrainingExample(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.board_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.move_probs_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.action_mask_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.stats_)*/ nullptr,
      /*decltype(_impl_.move_)*/ nullptr,
      /*decltype(_impl_.model_predictions_)*/ nullptr,
      /*decltype(_impl_.unix_micros_)*/ ::int64_t{0},
      /*decltype(_impl_.result_)*/ 0,
      /*decltype(_impl_.encoding_)*/ 0,
      /*decltype(_impl_.turn_)*/ 0,
    } {}
struct TrainingExampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrainingExampleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrainingExampleDefaultTypeInternal() {}
  union {
    TrainingExample _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrainingExampleDefaultTypeInternal _TrainingExample_default_instance_;
}  // namespace hexzpb
static ::_pb::Metadata file_level_metadata_hexz_2eproto[24];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_hexz_2eproto[5];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_hexz_2eproto = nullptr;
const ::uint32_t TableStruct_hexz_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hexzpb::Board, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::Board, _impl_.turn_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::Board, _impl_.move_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::Board, _impl_.last_revealed_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::Board, _impl_.flat_fields_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::Board, _impl_.score_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::Board, _impl_.resources_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::Board, _impl_.state_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hexzpb::Field, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::Field, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::Field, _impl_.owner_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::Field, _impl_.hidden_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::Field, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::Field, _impl_.blocked_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::Field, _impl_.lifetime_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::Field, _impl_.next_val_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hexzpb::ResourceInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::ResourceInfo, _impl_.num_pieces_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hexzpb::Player, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::Player, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::Player, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameInfo, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameInfo, _impl_.host_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameInfo, _impl_.started_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameInfo, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameInfo, _impl_.cpu_player_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameState, _impl_.game_info_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameState, _impl_.seqnum_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameState, _impl_.modified_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameState, _impl_.players_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameState, _impl_.engine_state_),
    0,
    ~0u,
    1,
    ~0u,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineState, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineState, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineState, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineFlagzState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineFlagzState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineFlagzState, _impl_.board_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineFlagzState, _impl_.free_cells_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineFlagzState, _impl_.normal_moves_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineFlagzState, _impl_.moves_),
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineClassicState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineClassicState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineClassicState, _impl_.board_),
    0,
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineFreeformState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineFreeformState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineFreeformState, _impl_.board_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineMove, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineMove, _impl_.player_num_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineMove, _impl_.move_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineMove, _impl_.row_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineMove, _impl_.col_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineMove, _impl_.cell_type_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::MCTSExample_MoveStats, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::MCTSExample_MoveStats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::MCTSExample_MoveStats, _impl_.move_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::MCTSExample_MoveStats, _impl_.visits_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::MCTSExample_MoveStats, _impl_.win_rate_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::hexzpb::MCTSExample, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::MCTSExample, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::MCTSExample, _impl_.game_id_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::MCTSExample, _impl_.board_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::MCTSExample, _impl_.result_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::MCTSExample, _impl_.move_stats_),
    ~0u,
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::hexzpb::SuggestMoveRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::SuggestMoveRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::SuggestMoveRequest, _impl_.max_think_time_ms_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::SuggestMoveRequest, _impl_.game_engine_state_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hexzpb::SuggestMoveStats_Score, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::SuggestMoveStats_Score, _impl_.kind_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::SuggestMoveStats_Score, _impl_.score_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hexzpb::SuggestMoveStats_ScoredMove, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::SuggestMoveStats_ScoredMove, _impl_.row_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::SuggestMoveStats_ScoredMove, _impl_.col_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::SuggestMoveStats_ScoredMove, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::SuggestMoveStats_ScoredMove, _impl_.scores_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hexzpb::SuggestMoveStats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::SuggestMoveStats, _impl_.moves_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::SuggestMoveStats, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::SuggestMoveResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::SuggestMoveResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::SuggestMoveResponse, _impl_.move_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::SuggestMoveResponse, _impl_.move_stats_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hexzpb::ModelKey, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::ModelKey, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::ModelKey, _impl_.checkpoint_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::AddTrainingExamplesRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::AddTrainingExamplesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::AddTrainingExamplesRequest, _impl_.model_key_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::AddTrainingExamplesRequest, _impl_.examples_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::AddTrainingExamplesRequest, _impl_.execution_id_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::hexzpb::AddTrainingExamplesResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::AddTrainingExamplesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::AddTrainingExamplesResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::AddTrainingExamplesResponse, _impl_.latest_model_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::AddTrainingExamplesResponse, _impl_.error_message_),
    ~0u,
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample_ModelPredictions, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample_ModelPredictions, _impl_.priors_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample_ModelPredictions, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample_Stats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample_Stats, _impl_.duration_micros_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample_Stats, _impl_.valid_moves_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample_Stats, _impl_.visit_count_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample_Stats, _impl_.visited_children_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample_Stats, _impl_.search_depth_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample_Stats, _impl_.search_tree_size_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample_Stats, _impl_.branch_nodes_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample_Stats, _impl_.min_child_vc_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample_Stats, _impl_.max_child_vc_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample_Stats, _impl_.selected_child_q_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample_Stats, _impl_.selected_child_vc_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample_Stats, _impl_.nodes_per_depth_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample, _impl_.unix_micros_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample, _impl_.turn_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample, _impl_.move_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample, _impl_.encoding_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample, _impl_.board_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample, _impl_.action_mask_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample, _impl_.move_probs_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample, _impl_.result_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample, _impl_.model_predictions_),
    PROTOBUF_FIELD_OFFSET(::hexzpb::TrainingExample, _impl_.stats_),
    ~0u,
    ~0u,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    2,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::hexzpb::Board)},
        {15, -1, -1, sizeof(::hexzpb::Field)},
        {30, -1, -1, sizeof(::hexzpb::ResourceInfo)},
        {39, -1, -1, sizeof(::hexzpb::Player)},
        {49, 62, -1, sizeof(::hexzpb::GameInfo)},
        {67, 80, -1, sizeof(::hexzpb::GameState)},
        {85, -1, -1, sizeof(::hexzpb::GameEngineState)},
        {97, 109, -1, sizeof(::hexzpb::GameEngineFlagzState)},
        {113, 122, -1, sizeof(::hexzpb::GameEngineClassicState)},
        {123, 132, -1, sizeof(::hexzpb::GameEngineFreeformState)},
        {133, -1, -1, sizeof(::hexzpb::GameEngineMove)},
        {146, 157, -1, sizeof(::hexzpb::MCTSExample_MoveStats)},
        {160, 172, -1, sizeof(::hexzpb::MCTSExample)},
        {176, 186, -1, sizeof(::hexzpb::SuggestMoveRequest)},
        {188, -1, -1, sizeof(::hexzpb::SuggestMoveStats_Score)},
        {198, -1, -1, sizeof(::hexzpb::SuggestMoveStats_ScoredMove)},
        {210, -1, -1, sizeof(::hexzpb::SuggestMoveStats)},
        {220, 230, -1, sizeof(::hexzpb::SuggestMoveResponse)},
        {232, -1, -1, sizeof(::hexzpb::ModelKey)},
        {242, 253, -1, sizeof(::hexzpb::AddTrainingExamplesRequest)},
        {256, 267, -1, sizeof(::hexzpb::AddTrainingExamplesResponse)},
        {270, -1, -1, sizeof(::hexzpb::TrainingExample_ModelPredictions)},
        {280, -1, -1, sizeof(::hexzpb::TrainingExample_Stats)},
        {300, 318, -1, sizeof(::hexzpb::TrainingExample)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::hexzpb::_Board_default_instance_._instance,
    &::hexzpb::_Field_default_instance_._instance,
    &::hexzpb::_ResourceInfo_default_instance_._instance,
    &::hexzpb::_Player_default_instance_._instance,
    &::hexzpb::_GameInfo_default_instance_._instance,
    &::hexzpb::_GameState_default_instance_._instance,
    &::hexzpb::_GameEngineState_default_instance_._instance,
    &::hexzpb::_GameEngineFlagzState_default_instance_._instance,
    &::hexzpb::_GameEngineClassicState_default_instance_._instance,
    &::hexzpb::_GameEngineFreeformState_default_instance_._instance,
    &::hexzpb::_GameEngineMove_default_instance_._instance,
    &::hexzpb::_MCTSExample_MoveStats_default_instance_._instance,
    &::hexzpb::_MCTSExample_default_instance_._instance,
    &::hexzpb::_SuggestMoveRequest_default_instance_._instance,
    &::hexzpb::_SuggestMoveStats_Score_default_instance_._instance,
    &::hexzpb::_SuggestMoveStats_ScoredMove_default_instance_._instance,
    &::hexzpb::_SuggestMoveStats_default_instance_._instance,
    &::hexzpb::_SuggestMoveResponse_default_instance_._instance,
    &::hexzpb::_ModelKey_default_instance_._instance,
    &::hexzpb::_AddTrainingExamplesRequest_default_instance_._instance,
    &::hexzpb::_AddTrainingExamplesResponse_default_instance_._instance,
    &::hexzpb::_TrainingExample_ModelPredictions_default_instance_._instance,
    &::hexzpb::_TrainingExample_Stats_default_instance_._instance,
    &::hexzpb::_TrainingExample_default_instance_._instance,
};
const char descriptor_table_protodef_hexz_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\nhexz.proto\022\006hexzpb\032\037google/protobuf/ti"
    "mestamp.proto\"\363\001\n\005Board\022\014\n\004turn\030\001 \001(\005\022\014\n"
    "\004move\030\002 \001(\005\022\025\n\rlast_revealed\030\003 \001(\005\022\"\n\013fl"
    "at_fields\030\004 \003(\0132\r.hexzpb.Field\022\r\n\005score\030"
    "\005 \003(\005\022\'\n\tresources\030\006 \003(\0132\024.hexzpb.Resour"
    "ceInfo\022&\n\005state\030\007 \001(\0162\027.hexzpb.Board.Gam"
    "eState\"3\n\tGameState\022\013\n\007INITIAL\020\000\022\013\n\007RUNN"
    "ING\020\001\022\014\n\010FINISHED\020\002\"\360\001\n\005Field\022$\n\004type\030\001 "
    "\001(\0162\026.hexzpb.Field.CellType\022\r\n\005owner\030\002 \001"
    "(\005\022\016\n\006hidden\030\003 \001(\010\022\r\n\005value\030\004 \001(\005\022\017\n\007blo"
    "cked\030\005 \001(\005\022\020\n\010lifetime\030\006 \001(\005\022\020\n\010next_val"
    "\030\007 \003(\005\"^\n\010CellType\022\n\n\006NORMAL\020\000\022\010\n\004DEAD\020\001"
    "\022\t\n\005GRASS\020\002\022\010\n\004ROCK\020\003\022\010\n\004FIRE\020\004\022\010\n\004FLAG\020"
    "\005\022\010\n\004PEST\020\006\022\t\n\005DEATH\020\007\"\"\n\014ResourceInfo\022\022"
    "\n\nnum_pieces\030\001 \003(\005\"\"\n\006Player\022\n\n\002id\030\001 \001(\t"
    "\022\014\n\004name\030\002 \001(\t\"s\n\010GameInfo\022\n\n\002id\030\001 \001(\t\022\014"
    "\n\004host\030\002 \001(\t\022+\n\007started\030\003 \001(\0132\032.google.p"
    "rotobuf.Timestamp\022\014\n\004type\030\004 \001(\t\022\022\n\ncpu_p"
    "layer\030\005 \001(\010\"\276\001\n\tGameState\022#\n\tgame_info\030\001"
    " \001(\0132\020.hexzpb.GameInfo\022\016\n\006seqnum\030\002 \001(\003\022,"
    "\n\010modified\030\004 \001(\0132\032.google.protobuf.Times"
    "tamp\022\037\n\007players\030\005 \003(\0132\016.hexzpb.Player\022-\n"
    "\014engine_state\030\006 \001(\0132\027.hexzpb.GameEngineS"
    "tate\"\261\001\n\017GameEngineState\022-\n\005flagz\030\001 \001(\0132"
    "\034.hexzpb.GameEngineFlagzStateH\000\0221\n\007class"
    "ic\030\002 \001(\0132\036.hexzpb.GameEngineClassicState"
    "H\000\0223\n\010freeform\030\003 \001(\0132\037.hexzpb.GameEngine"
    "FreeformStateH\000B\007\n\005state\"\205\001\n\024GameEngineF"
    "lagzState\022\034\n\005board\030\001 \001(\0132\r.hexzpb.Board\022"
    "\022\n\nfree_cells\030\002 \001(\005\022\024\n\014normal_moves\030\003 \003("
    "\005\022%\n\005moves\030\004 \003(\0132\026.hexzpb.GameEngineMove"
    "\"6\n\026GameEngineClassicState\022\034\n\005board\030\001 \001("
    "\0132\r.hexzpb.Board\"7\n\027GameEngineFreeformSt"
    "ate\022\034\n\005board\030\001 \001(\0132\r.hexzpb.Board\"w\n\016Gam"
    "eEngineMove\022\022\n\nplayer_num\030\001 \001(\005\022\014\n\004move\030"
    "\002 \001(\005\022\013\n\003row\030\003 \001(\005\022\013\n\003col\030\004 \001(\005\022)\n\tcell_"
    "type\030\005 \001(\0162\026.hexzpb.Field.CellType\"\324\001\n\013M"
    "CTSExample\022\017\n\007game_id\030\001 \001(\t\022\034\n\005board\030\002 \001"
    "(\0132\r.hexzpb.Board\022\016\n\006result\030\003 \003(\005\0221\n\nmov"
    "e_stats\030\004 \003(\0132\035.hexzpb.MCTSExample.MoveS"
    "tats\032S\n\tMoveStats\022$\n\004move\030\001 \001(\0132\026.hexzpb"
    ".GameEngineMove\022\016\n\006visits\030\002 \001(\005\022\020\n\010win_r"
    "ate\030\003 \001(\002\"c\n\022SuggestMoveRequest\022\031\n\021max_t"
    "hink_time_ms\030\001 \001(\003\0222\n\021game_engine_state\030"
    "\002 \001(\0132\027.hexzpb.GameEngineState\"\305\002\n\020Sugge"
    "stMoveStats\0222\n\005moves\030\001 \003(\0132#.hexzpb.Sugg"
    "estMoveStats.ScoredMove\022\r\n\005value\030\002 \001(\002\032H"
    "\n\005Score\0220\n\004kind\030\001 \001(\0162\".hexzpb.SuggestMo"
    "veStats.ScoreKind\022\r\n\005score\030\002 \001(\002\032|\n\nScor"
    "edMove\022\013\n\003row\030\001 \001(\005\022\013\n\003col\030\002 \001(\005\022$\n\004type"
    "\030\003 \001(\0162\026.hexzpb.Field.CellType\022.\n\006scores"
    "\030\004 \003(\0132\036.hexzpb.SuggestMoveStats.Score\"&"
    "\n\tScoreKind\022\t\n\005FINAL\020\000\022\016\n\nMCTS_PRIOR\020\001\"i"
    "\n\023SuggestMoveResponse\022$\n\004move\030\001 \001(\0132\026.he"
    "xzpb.GameEngineMove\022,\n\nmove_stats\030\002 \001(\0132"
    "\030.hexzpb.SuggestMoveStats\",\n\010ModelKey\022\014\n"
    "\004name\030\001 \001(\t\022\022\n\ncheckpoint\030\002 \001(\005\"\202\001\n\032AddT"
    "rainingExamplesRequest\022#\n\tmodel_key\030\001 \001("
    "\0132\020.hexzpb.ModelKey\022)\n\010examples\030\002 \003(\0132\027."
    "hexzpb.TrainingExample\022\024\n\014execution_id\030\003"
    " \001(\t\"\220\002\n\033AddTrainingExamplesResponse\022:\n\006"
    "status\030\001 \001(\0162*.hexzpb.AddTrainingExample"
    "sResponse.Status\022&\n\014latest_model\030\002 \001(\0132\020"
    ".hexzpb.ModelKey\022\025\n\rerror_message\030\003 \001(\t\""
    "v\n\006Status\022\026\n\022STATUS_UNSPECIFIED\020\000\022\014\n\010ACC"
    "EPTED\020\001\022\030\n\024REJECTED_WRONG_MODEL\020\002\022\030\n\024REJ"
    "ECTED_AT_CAPACITY\020\003\022\022\n\016REJECTED_OTHER\020\004\""
    "\307\005\n\017TrainingExample\022\023\n\013unix_micros\030\001 \001(\003"
    "\022\014\n\004turn\030\007 \001(\005\022$\n\004move\030\t \001(\0132\026.hexzpb.Ga"
    "meEngineMove\0222\n\010encoding\030\006 \001(\0162 .hexzpb."
    "TrainingExample.Encoding\022\r\n\005board\030\002 \001(\014\022"
    "\023\n\013action_mask\030\010 \001(\014\022\022\n\nmove_probs\030\003 \001(\014"
    "\022\016\n\006result\030\004 \001(\002\022C\n\021model_predictions\030\n "
    "\001(\0132(.hexzpb.TrainingExample.ModelPredic"
    "tions\022,\n\005stats\030\005 \001(\0132\035.hexzpb.TrainingEx"
    "ample.Stats\0321\n\020ModelPredictions\022\016\n\006prior"
    "s\030\001 \001(\014\022\r\n\005value\030\002 \001(\002\032\244\002\n\005Stats\022\027\n\017dura"
    "tion_micros\030\001 \001(\003\022\023\n\013valid_moves\030\002 \001(\005\022\023"
    "\n\013visit_count\030\003 \001(\005\022\030\n\020visited_children\030"
    "\004 \001(\005\022\024\n\014search_depth\030\005 \001(\005\022\030\n\020search_tr"
    "ee_size\030\006 \001(\005\022\024\n\014branch_nodes\030\007 \001(\005\022\024\n\014m"
    "in_child_vc\030\010 \001(\005\022\024\n\014max_child_vc\030\t \001(\005\022"
    "\030\n\020selected_child_q\030\r \001(\005\022\031\n\021selected_ch"
    "ild_vc\030\n \001(\005\022\027\n\017nodes_per_depth\030\014 \003(\005\"\"\n"
    "\010Encoding\022\t\n\005NUMPY\020\000\022\013\n\007PYTORCH\020\001B\037Z\035git"
    "hub.com/dnswlt/hexz/hexzpbb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_hexz_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_hexz_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_hexz_2eproto = {
    false,
    false,
    3434,
    descriptor_table_protodef_hexz_2eproto,
    "hexz.proto",
    &descriptor_table_hexz_2eproto_once,
    descriptor_table_hexz_2eproto_deps,
    1,
    24,
    schemas,
    file_default_instances,
    TableStruct_hexz_2eproto::offsets,
    file_level_metadata_hexz_2eproto,
    file_level_enum_descriptors_hexz_2eproto,
    file_level_service_descriptors_hexz_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_hexz_2eproto_getter() {
  return &descriptor_table_hexz_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_hexz_2eproto(&descriptor_table_hexz_2eproto);
namespace hexzpb {
const ::google::protobuf::EnumDescriptor* Board_GameState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_hexz_2eproto);
  return file_level_enum_descriptors_hexz_2eproto[0];
}
bool Board_GameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Board_GameState Board::INITIAL;
constexpr Board_GameState Board::RUNNING;
constexpr Board_GameState Board::FINISHED;
constexpr Board_GameState Board::GameState_MIN;
constexpr Board_GameState Board::GameState_MAX;
constexpr int Board::GameState_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* Field_CellType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_hexz_2eproto);
  return file_level_enum_descriptors_hexz_2eproto[1];
}
bool Field_CellType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Field_CellType Field::NORMAL;
constexpr Field_CellType Field::DEAD;
constexpr Field_CellType Field::GRASS;
constexpr Field_CellType Field::ROCK;
constexpr Field_CellType Field::FIRE;
constexpr Field_CellType Field::FLAG;
constexpr Field_CellType Field::PEST;
constexpr Field_CellType Field::DEATH;
constexpr Field_CellType Field::CellType_MIN;
constexpr Field_CellType Field::CellType_MAX;
constexpr int Field::CellType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* SuggestMoveStats_ScoreKind_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_hexz_2eproto);
  return file_level_enum_descriptors_hexz_2eproto[2];
}
bool SuggestMoveStats_ScoreKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr SuggestMoveStats_ScoreKind SuggestMoveStats::FINAL;
constexpr SuggestMoveStats_ScoreKind SuggestMoveStats::MCTS_PRIOR;
constexpr SuggestMoveStats_ScoreKind SuggestMoveStats::ScoreKind_MIN;
constexpr SuggestMoveStats_ScoreKind SuggestMoveStats::ScoreKind_MAX;
constexpr int SuggestMoveStats::ScoreKind_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* AddTrainingExamplesResponse_Status_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_hexz_2eproto);
  return file_level_enum_descriptors_hexz_2eproto[3];
}
bool AddTrainingExamplesResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr AddTrainingExamplesResponse_Status AddTrainingExamplesResponse::STATUS_UNSPECIFIED;
constexpr AddTrainingExamplesResponse_Status AddTrainingExamplesResponse::ACCEPTED;
constexpr AddTrainingExamplesResponse_Status AddTrainingExamplesResponse::REJECTED_WRONG_MODEL;
constexpr AddTrainingExamplesResponse_Status AddTrainingExamplesResponse::REJECTED_AT_CAPACITY;
constexpr AddTrainingExamplesResponse_Status AddTrainingExamplesResponse::REJECTED_OTHER;
constexpr AddTrainingExamplesResponse_Status AddTrainingExamplesResponse::Status_MIN;
constexpr AddTrainingExamplesResponse_Status AddTrainingExamplesResponse::Status_MAX;
constexpr int AddTrainingExamplesResponse::Status_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* TrainingExample_Encoding_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_hexz_2eproto);
  return file_level_enum_descriptors_hexz_2eproto[4];
}
bool TrainingExample_Encoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TrainingExample_Encoding TrainingExample::NUMPY;
constexpr TrainingExample_Encoding TrainingExample::PYTORCH;
constexpr TrainingExample_Encoding TrainingExample::Encoding_MIN;
constexpr TrainingExample_Encoding TrainingExample::Encoding_MAX;
constexpr int TrainingExample::Encoding_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Board::_Internal {
 public:
};

Board::Board(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.Board)
}
Board::Board(const Board& from) : ::google::protobuf::Message() {
  Board* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.flat_fields_){from._impl_.flat_fields_},
      decltype(_impl_.score_){from._impl_.score_},
      /* _impl_._score_cached_byte_size_ = */ {0},
      decltype(_impl_.resources_){from._impl_.resources_},
      decltype(_impl_.turn_){},
      decltype(_impl_.move_){},
      decltype(_impl_.last_revealed_){},
      decltype(_impl_.state_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.turn_, &from._impl_.turn_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.turn_)) + sizeof(_impl_.state_));

  // @@protoc_insertion_point(copy_constructor:hexzpb.Board)
}
inline void Board::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.flat_fields_){arena},
      decltype(_impl_.score_){arena},
      /* _impl_._score_cached_byte_size_ = */ {0},
      decltype(_impl_.resources_){arena},
      decltype(_impl_.turn_){0},
      decltype(_impl_.move_){0},
      decltype(_impl_.last_revealed_){0},
      decltype(_impl_.state_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Board::~Board() {
  // @@protoc_insertion_point(destructor:hexzpb.Board)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Board::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.flat_fields_.~RepeatedPtrField();
  _impl_.score_.~RepeatedField();
  _impl_.resources_.~RepeatedPtrField();
}
void Board::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Board::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.Board)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_flat_fields()->Clear();
  _internal_mutable_score()->Clear();
  _internal_mutable_resources()->Clear();
  ::memset(&_impl_.turn_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.turn_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Board::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 0, 2> Board::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Board_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 turn = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Board, _impl_.turn_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Board, _impl_.turn_)}},
    // int32 move = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Board, _impl_.move_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Board, _impl_.move_)}},
    // int32 last_revealed = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Board, _impl_.last_revealed_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Board, _impl_.last_revealed_)}},
    // repeated .hexzpb.Field flat_fields = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Board, _impl_.flat_fields_)}},
    // repeated int32 score = 5;
    {::_pbi::TcParser::FastV32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Board, _impl_.score_)}},
    // repeated .hexzpb.ResourceInfo resources = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 1, PROTOBUF_FIELD_OFFSET(Board, _impl_.resources_)}},
    // .hexzpb.Board.GameState state = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Board, _impl_.state_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Board, _impl_.state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 turn = 1;
    {PROTOBUF_FIELD_OFFSET(Board, _impl_.turn_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 move = 2;
    {PROTOBUF_FIELD_OFFSET(Board, _impl_.move_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 last_revealed = 3;
    {PROTOBUF_FIELD_OFFSET(Board, _impl_.last_revealed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .hexzpb.Field flat_fields = 4;
    {PROTOBUF_FIELD_OFFSET(Board, _impl_.flat_fields_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated int32 score = 5;
    {PROTOBUF_FIELD_OFFSET(Board, _impl_.score_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated .hexzpb.ResourceInfo resources = 6;
    {PROTOBUF_FIELD_OFFSET(Board, _impl_.resources_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hexzpb.Board.GameState state = 7;
    {PROTOBUF_FIELD_OFFSET(Board, _impl_.state_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::hexzpb::Field>()},
    {::_pbi::TcParser::GetTable<::hexzpb::ResourceInfo>()},
  }}, {{
  }},
};

::uint8_t* Board::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.Board)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 turn = 1;
  if (this->_internal_turn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_turn(), target);
  }

  // int32 move = 2;
  if (this->_internal_move() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_move(), target);
  }

  // int32 last_revealed = 3;
  if (this->_internal_last_revealed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_last_revealed(), target);
  }

  // repeated .hexzpb.Field flat_fields = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_flat_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_flat_fields().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 score = 5;
  {
    int byte_size = _impl_._score_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(5, _internal_score(),
                                                 byte_size, target);
    }
  }

  // repeated .hexzpb.ResourceInfo resources = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_resources_size()); i < n; i++) {
    const auto& repfield = this->_internal_resources().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .hexzpb.Board.GameState state = 7;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.Board)
  return target;
}

::size_t Board::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.Board)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hexzpb.Field flat_fields = 4;
  total_size += 1UL * this->_internal_flat_fields_size();
  for (const auto& msg : this->_internal_flat_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated int32 score = 5;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_score())
    ;
    _impl_._score_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated .hexzpb.ResourceInfo resources = 6;
  total_size += 1UL * this->_internal_resources_size();
  for (const auto& msg : this->_internal_resources()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // int32 turn = 1;
  if (this->_internal_turn() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_turn());
  }

  // int32 move = 2;
  if (this->_internal_move() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_move());
  }

  // int32 last_revealed = 3;
  if (this->_internal_last_revealed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_last_revealed());
  }

  // .hexzpb.Board.GameState state = 7;
  if (this->_internal_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Board::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Board::MergeImpl
};
const ::google::protobuf::Message::ClassData*Board::GetClassData() const { return &_class_data_; }


void Board::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Board*>(&to_msg);
  auto& from = static_cast<const Board&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.Board)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_flat_fields()->MergeFrom(from._internal_flat_fields());
  _this->_internal_mutable_score()->MergeFrom(from._internal_score());
  _this->_internal_mutable_resources()->MergeFrom(from._internal_resources());
  if (from._internal_turn() != 0) {
    _this->_internal_set_turn(from._internal_turn());
  }
  if (from._internal_move() != 0) {
    _this->_internal_set_move(from._internal_move());
  }
  if (from._internal_last_revealed() != 0) {
    _this->_internal_set_last_revealed(from._internal_last_revealed());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Board::CopyFrom(const Board& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.Board)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Board::IsInitialized() const {
  return true;
}

void Board::InternalSwap(Board* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.flat_fields_.InternalSwap(&other->_impl_.flat_fields_);
  _impl_.score_.InternalSwap(&other->_impl_.score_);
  _impl_.resources_.InternalSwap(&other->_impl_.resources_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Board, _impl_.state_)
      + sizeof(Board::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(Board, _impl_.turn_)>(
          reinterpret_cast<char*>(&_impl_.turn_),
          reinterpret_cast<char*>(&other->_impl_.turn_));
}

::google::protobuf::Metadata Board::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[0]);
}
// ===================================================================

class Field::_Internal {
 public:
};

Field::Field(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.Field)
}
Field::Field(const Field& from) : ::google::protobuf::Message() {
  Field* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.next_val_){from._impl_.next_val_},
      /* _impl_._next_val_cached_byte_size_ = */ {0},
      decltype(_impl_.type_){},
      decltype(_impl_.owner_){},
      decltype(_impl_.hidden_){},
      decltype(_impl_.value_){},
      decltype(_impl_.blocked_){},
      decltype(_impl_.lifetime_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.lifetime_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.lifetime_));

  // @@protoc_insertion_point(copy_constructor:hexzpb.Field)
}
inline void Field::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.next_val_){arena},
      /* _impl_._next_val_cached_byte_size_ = */ {0},
      decltype(_impl_.type_){0},
      decltype(_impl_.owner_){0},
      decltype(_impl_.hidden_){false},
      decltype(_impl_.value_){0},
      decltype(_impl_.blocked_){0},
      decltype(_impl_.lifetime_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Field::~Field() {
  // @@protoc_insertion_point(destructor:hexzpb.Field)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Field::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.next_val_.~RepeatedField();
}
void Field::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Field::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.Field)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_next_val()->Clear();
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.lifetime_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.lifetime_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Field::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> Field::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Field_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .hexzpb.Field.CellType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Field, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Field, _impl_.type_)}},
    // int32 owner = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Field, _impl_.owner_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Field, _impl_.owner_)}},
    // bool hidden = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Field, _impl_.hidden_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Field, _impl_.hidden_)}},
    // int32 value = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Field, _impl_.value_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Field, _impl_.value_)}},
    // int32 blocked = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Field, _impl_.blocked_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Field, _impl_.blocked_)}},
    // int32 lifetime = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Field, _impl_.lifetime_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Field, _impl_.lifetime_)}},
    // repeated int32 next_val = 7;
    {::_pbi::TcParser::FastV32P1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(Field, _impl_.next_val_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .hexzpb.Field.CellType type = 1;
    {PROTOBUF_FIELD_OFFSET(Field, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 owner = 2;
    {PROTOBUF_FIELD_OFFSET(Field, _impl_.owner_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool hidden = 3;
    {PROTOBUF_FIELD_OFFSET(Field, _impl_.hidden_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 value = 4;
    {PROTOBUF_FIELD_OFFSET(Field, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 blocked = 5;
    {PROTOBUF_FIELD_OFFSET(Field, _impl_.blocked_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 lifetime = 6;
    {PROTOBUF_FIELD_OFFSET(Field, _impl_.lifetime_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated int32 next_val = 7;
    {PROTOBUF_FIELD_OFFSET(Field, _impl_.next_val_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Field::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.Field)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .hexzpb.Field.CellType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // int32 owner = 2;
  if (this->_internal_owner() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_owner(), target);
  }

  // bool hidden = 3;
  if (this->_internal_hidden() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_hidden(), target);
  }

  // int32 value = 4;
  if (this->_internal_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_value(), target);
  }

  // int32 blocked = 5;
  if (this->_internal_blocked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_blocked(), target);
  }

  // int32 lifetime = 6;
  if (this->_internal_lifetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_lifetime(), target);
  }

  // repeated int32 next_val = 7;
  {
    int byte_size = _impl_._next_val_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(7, _internal_next_val(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.Field)
  return target;
}

::size_t Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.Field)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 next_val = 7;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_next_val())
    ;
    _impl_._next_val_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .hexzpb.Field.CellType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 owner = 2;
  if (this->_internal_owner() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_owner());
  }

  // bool hidden = 3;
  if (this->_internal_hidden() != 0) {
    total_size += 2;
  }

  // int32 value = 4;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_value());
  }

  // int32 blocked = 5;
  if (this->_internal_blocked() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_blocked());
  }

  // int32 lifetime = 6;
  if (this->_internal_lifetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_lifetime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Field::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Field::MergeImpl
};
const ::google::protobuf::Message::ClassData*Field::GetClassData() const { return &_class_data_; }


void Field::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Field*>(&to_msg);
  auto& from = static_cast<const Field&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.Field)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_next_val()->MergeFrom(from._internal_next_val());
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_owner() != 0) {
    _this->_internal_set_owner(from._internal_owner());
  }
  if (from._internal_hidden() != 0) {
    _this->_internal_set_hidden(from._internal_hidden());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_blocked() != 0) {
    _this->_internal_set_blocked(from._internal_blocked());
  }
  if (from._internal_lifetime() != 0) {
    _this->_internal_set_lifetime(from._internal_lifetime());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Field::CopyFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Field::IsInitialized() const {
  return true;
}

void Field::InternalSwap(Field* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.next_val_.InternalSwap(&other->_impl_.next_val_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Field, _impl_.lifetime_)
      + sizeof(Field::_impl_.lifetime_)
      - PROTOBUF_FIELD_OFFSET(Field, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::google::protobuf::Metadata Field::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[1]);
}
// ===================================================================

class ResourceInfo::_Internal {
 public:
};

ResourceInfo::ResourceInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.ResourceInfo)
}
ResourceInfo::ResourceInfo(const ResourceInfo& from) : ::google::protobuf::Message() {
  ResourceInfo* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.num_pieces_){from._impl_.num_pieces_},
      /* _impl_._num_pieces_cached_byte_size_ = */ {0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:hexzpb.ResourceInfo)
}
inline void ResourceInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.num_pieces_){arena},
      /* _impl_._num_pieces_cached_byte_size_ = */ {0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
ResourceInfo::~ResourceInfo() {
  // @@protoc_insertion_point(destructor:hexzpb.ResourceInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ResourceInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.num_pieces_.~RepeatedField();
}
void ResourceInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ResourceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.ResourceInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_num_pieces()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ResourceInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> ResourceInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ResourceInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated int32 num_pieces = 1;
    {::_pbi::TcParser::FastV32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceInfo, _impl_.num_pieces_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated int32 num_pieces = 1;
    {PROTOBUF_FIELD_OFFSET(ResourceInfo, _impl_.num_pieces_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ResourceInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.ResourceInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated int32 num_pieces = 1;
  {
    int byte_size = _impl_._num_pieces_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(1, _internal_num_pieces(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.ResourceInfo)
  return target;
}

::size_t ResourceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.ResourceInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 num_pieces = 1;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_num_pieces())
    ;
    _impl_._num_pieces_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ResourceInfo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ResourceInfo::MergeImpl
};
const ::google::protobuf::Message::ClassData*ResourceInfo::GetClassData() const { return &_class_data_; }


void ResourceInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ResourceInfo*>(&to_msg);
  auto& from = static_cast<const ResourceInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.ResourceInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_num_pieces()->MergeFrom(from._internal_num_pieces());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceInfo::CopyFrom(const ResourceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.ResourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ResourceInfo::IsInitialized() const {
  return true;
}

void ResourceInfo::InternalSwap(ResourceInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.num_pieces_.InternalSwap(&other->_impl_.num_pieces_);
}

::google::protobuf::Metadata ResourceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[2]);
}
// ===================================================================

class Player::_Internal {
 public:
};

Player::Player(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.Player)
}
Player::Player(const Player& from) : ::google::protobuf::Message() {
  Player* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){},
      decltype(_impl_.name_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:hexzpb.Player)
}
inline void Player::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){},
      decltype(_impl_.name_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Player::~Player() {
  // @@protoc_insertion_point(destructor:hexzpb.Player)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Player::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
}
void Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.Player)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Player::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 28, 2> Player::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Player_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.name_)}},
    // string id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Player, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(Player, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\15\2\4\0\0\0\0\0"
    "hexzpb.Player"
    "id"
    "name"
  }},
};

::uint8_t* Player::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.Player)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hexzpb.Player.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hexzpb.Player.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.Player)
  return target;
}

::size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.Player)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Player::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Player::MergeImpl
};
const ::google::protobuf::Message::ClassData*Player::GetClassData() const { return &_class_data_; }


void Player::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Player*>(&to_msg);
  auto& from = static_cast<const Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.Player)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Player::IsInitialized() const {
  return true;
}

void Player::InternalSwap(Player* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

::google::protobuf::Metadata Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[3]);
}
// ===================================================================

class GameInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GameInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GameInfo, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& started(const GameInfo* msg);
  static void set_has_started(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::Timestamp& GameInfo::_Internal::started(const GameInfo* msg) {
  return *msg->_impl_.started_;
}
void GameInfo::clear_started() {
  if (_impl_.started_ != nullptr) _impl_.started_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameInfo::GameInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.GameInfo)
}
GameInfo::GameInfo(const GameInfo& from) : ::google::protobuf::Message() {
  GameInfo* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.id_){},
      decltype(_impl_.host_){},
      decltype(_impl_.type_){},
      decltype(_impl_.started_){nullptr},
      decltype(_impl_.cpu_player_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.host_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.started_ = new ::google::protobuf::Timestamp(*from._impl_.started_);
  }
  _this->_impl_.cpu_player_ = from._impl_.cpu_player_;

  // @@protoc_insertion_point(copy_constructor:hexzpb.GameInfo)
}
inline void GameInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.id_){},
      decltype(_impl_.host_){},
      decltype(_impl_.type_){},
      decltype(_impl_.started_){nullptr},
      decltype(_impl_.cpu_player_){false},
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.host_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
GameInfo::~GameInfo() {
  // @@protoc_insertion_point(destructor:hexzpb.GameInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.host_.Destroy();
  _impl_.type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.started_;
}
void GameInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.GameInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.host_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.started_ != nullptr);
    _impl_.started_->Clear();
  }
  _impl_.cpu_player_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GameInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 34, 2> GameInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameInfo, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GameInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GameInfo, _impl_.id_)}},
    // string host = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GameInfo, _impl_.host_)}},
    // .google.protobuf.Timestamp started = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameInfo, _impl_.started_)}},
    // string type = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(GameInfo, _impl_.type_)}},
    // bool cpu_player = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GameInfo, _impl_.cpu_player_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(GameInfo, _impl_.cpu_player_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1;
    {PROTOBUF_FIELD_OFFSET(GameInfo, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string host = 2;
    {PROTOBUF_FIELD_OFFSET(GameInfo, _impl_.host_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp started = 3;
    {PROTOBUF_FIELD_OFFSET(GameInfo, _impl_.started_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string type = 4;
    {PROTOBUF_FIELD_OFFSET(GameInfo, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool cpu_player = 5;
    {PROTOBUF_FIELD_OFFSET(GameInfo, _impl_.cpu_player_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\17\2\4\0\4\0\0\0"
    "hexzpb.GameInfo"
    "id"
    "host"
    "type"
  }},
};

::uint8_t* GameInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.GameInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hexzpb.GameInfo.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string host = 2;
  if (!this->_internal_host().empty()) {
    const std::string& _s = this->_internal_host();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hexzpb.GameInfo.host");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp started = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::started(this),
        _Internal::started(this).GetCachedSize(), target, stream);
  }

  // string type = 4;
  if (!this->_internal_type().empty()) {
    const std::string& _s = this->_internal_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hexzpb.GameInfo.type");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // bool cpu_player = 5;
  if (this->_internal_cpu_player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_cpu_player(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.GameInfo)
  return target;
}

::size_t GameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.GameInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string host = 2;
  if (!this->_internal_host().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_host());
  }

  // string type = 4;
  if (!this->_internal_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  // .google.protobuf.Timestamp started = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.started_);
  }

  // bool cpu_player = 5;
  if (this->_internal_cpu_player() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GameInfo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GameInfo::MergeImpl
};
const ::google::protobuf::Message::ClassData*GameInfo::GetClassData() const { return &_class_data_; }


void GameInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GameInfo*>(&to_msg);
  auto& from = static_cast<const GameInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.GameInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_started()->::google::protobuf::Timestamp::MergeFrom(
        from._internal_started());
  }
  if (from._internal_cpu_player() != 0) {
    _this->_internal_set_cpu_player(from._internal_cpu_player());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameInfo::CopyFrom(const GameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.GameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameInfo::IsInitialized() const {
  return true;
}

void GameInfo::InternalSwap(GameInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.host_, lhs_arena,
                                       &other->_impl_.host_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameInfo, _impl_.cpu_player_)
      + sizeof(GameInfo::_impl_.cpu_player_)
      - PROTOBUF_FIELD_OFFSET(GameInfo, _impl_.started_)>(
          reinterpret_cast<char*>(&_impl_.started_),
          reinterpret_cast<char*>(&other->_impl_.started_));
}

::google::protobuf::Metadata GameInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[4]);
}
// ===================================================================

class GameState::_Internal {
 public:
  using HasBits = decltype(std::declval<GameState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GameState, _impl_._has_bits_);
  static const ::hexzpb::GameInfo& game_info(const GameState* msg);
  static void set_has_game_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& modified(const GameState* msg);
  static void set_has_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hexzpb::GameEngineState& engine_state(const GameState* msg);
  static void set_has_engine_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hexzpb::GameInfo& GameState::_Internal::game_info(const GameState* msg) {
  return *msg->_impl_.game_info_;
}
const ::google::protobuf::Timestamp& GameState::_Internal::modified(const GameState* msg) {
  return *msg->_impl_.modified_;
}
const ::hexzpb::GameEngineState& GameState::_Internal::engine_state(const GameState* msg) {
  return *msg->_impl_.engine_state_;
}
void GameState::clear_modified() {
  if (_impl_.modified_ != nullptr) _impl_.modified_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GameState::GameState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.GameState)
}
GameState::GameState(const GameState& from) : ::google::protobuf::Message() {
  GameState* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.players_){from._impl_.players_},
      decltype(_impl_.game_info_){nullptr},
      decltype(_impl_.modified_){nullptr},
      decltype(_impl_.engine_state_){nullptr},
      decltype(_impl_.seqnum_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.game_info_ = new ::hexzpb::GameInfo(*from._impl_.game_info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.modified_ = new ::google::protobuf::Timestamp(*from._impl_.modified_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.engine_state_ = new ::hexzpb::GameEngineState(*from._impl_.engine_state_);
  }
  _this->_impl_.seqnum_ = from._impl_.seqnum_;

  // @@protoc_insertion_point(copy_constructor:hexzpb.GameState)
}
inline void GameState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.players_){arena},
      decltype(_impl_.game_info_){nullptr},
      decltype(_impl_.modified_){nullptr},
      decltype(_impl_.engine_state_){nullptr},
      decltype(_impl_.seqnum_){::int64_t{0}},
  };
}
GameState::~GameState() {
  // @@protoc_insertion_point(destructor:hexzpb.GameState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.game_info_;
  if (this != internal_default_instance()) delete _impl_.modified_;
  if (this != internal_default_instance()) delete _impl_.engine_state_;
}
void GameState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.GameState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_players()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.game_info_ != nullptr);
      _impl_.game_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.modified_ != nullptr);
      _impl_.modified_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.engine_state_ != nullptr);
      _impl_.engine_state_->Clear();
    }
  }
  _impl_.seqnum_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GameState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 4, 0, 2> GameState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameState, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967236,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GameState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .hexzpb.GameInfo game_info = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GameState, _impl_.game_info_)}},
    // int64 seqnum = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(GameState, _impl_.seqnum_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GameState, _impl_.seqnum_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp modified = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(GameState, _impl_.modified_)}},
    // repeated .hexzpb.Player players = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 2, PROTOBUF_FIELD_OFFSET(GameState, _impl_.players_)}},
    // .hexzpb.GameEngineState engine_state = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 2, 3, PROTOBUF_FIELD_OFFSET(GameState, _impl_.engine_state_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .hexzpb.GameInfo game_info = 1;
    {PROTOBUF_FIELD_OFFSET(GameState, _impl_.game_info_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 seqnum = 2;
    {PROTOBUF_FIELD_OFFSET(GameState, _impl_.seqnum_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .google.protobuf.Timestamp modified = 4;
    {PROTOBUF_FIELD_OFFSET(GameState, _impl_.modified_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .hexzpb.Player players = 5;
    {PROTOBUF_FIELD_OFFSET(GameState, _impl_.players_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hexzpb.GameEngineState engine_state = 6;
    {PROTOBUF_FIELD_OFFSET(GameState, _impl_.engine_state_), _Internal::kHasBitsOffset + 2, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::hexzpb::GameInfo>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::hexzpb::Player>()},
    {::_pbi::TcParser::GetTable<::hexzpb::GameEngineState>()},
  }}, {{
  }},
};

::uint8_t* GameState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.GameState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .hexzpb.GameInfo game_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::game_info(this),
        _Internal::game_info(this).GetCachedSize(), target, stream);
  }

  // int64 seqnum = 2;
  if (this->_internal_seqnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_seqnum(), target);
  }

  // .google.protobuf.Timestamp modified = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::modified(this),
        _Internal::modified(this).GetCachedSize(), target, stream);
  }

  // repeated .hexzpb.Player players = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .hexzpb.GameEngineState engine_state = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::engine_state(this),
        _Internal::engine_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.GameState)
  return target;
}

::size_t GameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.GameState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hexzpb.Player players = 5;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_internal_players()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .hexzpb.GameInfo game_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.game_info_);
    }

    // .google.protobuf.Timestamp modified = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.modified_);
    }

    // .hexzpb.GameEngineState engine_state = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.engine_state_);
    }

  }
  // int64 seqnum = 2;
  if (this->_internal_seqnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_seqnum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GameState::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GameState::MergeImpl
};
const ::google::protobuf::Message::ClassData*GameState::GetClassData() const { return &_class_data_; }


void GameState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GameState*>(&to_msg);
  auto& from = static_cast<const GameState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.GameState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_players()->MergeFrom(from._internal_players());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_game_info()->::hexzpb::GameInfo::MergeFrom(
          from._internal_game_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_modified()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_modified());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_engine_state()->::hexzpb::GameEngineState::MergeFrom(
          from._internal_engine_state());
    }
  }
  if (from._internal_seqnum() != 0) {
    _this->_internal_set_seqnum(from._internal_seqnum());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameState::IsInitialized() const {
  return true;
}

void GameState::InternalSwap(GameState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameState, _impl_.seqnum_)
      + sizeof(GameState::_impl_.seqnum_)
      - PROTOBUF_FIELD_OFFSET(GameState, _impl_.game_info_)>(
          reinterpret_cast<char*>(&_impl_.game_info_),
          reinterpret_cast<char*>(&other->_impl_.game_info_));
}

::google::protobuf::Metadata GameState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[5]);
}
// ===================================================================

class GameEngineState::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::hexzpb::GameEngineState, _impl_._oneof_case_);
  static const ::hexzpb::GameEngineFlagzState& flagz(const GameEngineState* msg);
  static const ::hexzpb::GameEngineClassicState& classic(const GameEngineState* msg);
  static const ::hexzpb::GameEngineFreeformState& freeform(const GameEngineState* msg);
};

const ::hexzpb::GameEngineFlagzState& GameEngineState::_Internal::flagz(const GameEngineState* msg) {
  return *msg->_impl_.state_.flagz_;
}
const ::hexzpb::GameEngineClassicState& GameEngineState::_Internal::classic(const GameEngineState* msg) {
  return *msg->_impl_.state_.classic_;
}
const ::hexzpb::GameEngineFreeformState& GameEngineState::_Internal::freeform(const GameEngineState* msg) {
  return *msg->_impl_.state_.freeform_;
}
void GameEngineState::set_allocated_flagz(::hexzpb::GameEngineFlagzState* flagz) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_state();
  if (flagz) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::InternalGetOwningArena(flagz);
    if (message_arena != submessage_arena) {
      flagz = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, flagz, submessage_arena);
    }
    set_has_flagz();
    _impl_.state_.flagz_ = flagz;
  }
  // @@protoc_insertion_point(field_set_allocated:hexzpb.GameEngineState.flagz)
}
void GameEngineState::set_allocated_classic(::hexzpb::GameEngineClassicState* classic) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_state();
  if (classic) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::InternalGetOwningArena(classic);
    if (message_arena != submessage_arena) {
      classic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, classic, submessage_arena);
    }
    set_has_classic();
    _impl_.state_.classic_ = classic;
  }
  // @@protoc_insertion_point(field_set_allocated:hexzpb.GameEngineState.classic)
}
void GameEngineState::set_allocated_freeform(::hexzpb::GameEngineFreeformState* freeform) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_state();
  if (freeform) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::InternalGetOwningArena(freeform);
    if (message_arena != submessage_arena) {
      freeform = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, freeform, submessage_arena);
    }
    set_has_freeform();
    _impl_.state_.freeform_ = freeform;
  }
  // @@protoc_insertion_point(field_set_allocated:hexzpb.GameEngineState.freeform)
}
GameEngineState::GameEngineState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.GameEngineState)
}
GameEngineState::GameEngineState(const GameEngineState& from) : ::google::protobuf::Message() {
  GameEngineState* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  clear_has_state();
  switch (from.state_case()) {
    case kFlagz: {
      _this->_internal_mutable_flagz()->::hexzpb::GameEngineFlagzState::MergeFrom(
          from._internal_flagz());
      break;
    }
    case kClassic: {
      _this->_internal_mutable_classic()->::hexzpb::GameEngineClassicState::MergeFrom(
          from._internal_classic());
      break;
    }
    case kFreeform: {
      _this->_internal_mutable_freeform()->::hexzpb::GameEngineFreeformState::MergeFrom(
          from._internal_freeform());
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:hexzpb.GameEngineState)
}
inline void GameEngineState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  clear_has_state();
}
GameEngineState::~GameEngineState() {
  // @@protoc_insertion_point(destructor:hexzpb.GameEngineState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEngineState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_state()) {
    clear_state();
  }
}
void GameEngineState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEngineState::clear_state() {
// @@protoc_insertion_point(one_of_clear_start:hexzpb.GameEngineState)
  switch (state_case()) {
    case kFlagz: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.state_.flagz_;
      }
      break;
    }
    case kClassic: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.state_.classic_;
      }
      break;
    }
    case kFreeform: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.state_.freeform_;
      }
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = STATE_NOT_SET;
}


PROTOBUF_NOINLINE void GameEngineState::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.GameEngineState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_state();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GameEngineState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 3, 0, 2> GameEngineState::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GameEngineState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .hexzpb.GameEngineFlagzState flagz = 1;
    {PROTOBUF_FIELD_OFFSET(GameEngineState, _impl_.state_.flagz_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hexzpb.GameEngineClassicState classic = 2;
    {PROTOBUF_FIELD_OFFSET(GameEngineState, _impl_.state_.classic_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hexzpb.GameEngineFreeformState freeform = 3;
    {PROTOBUF_FIELD_OFFSET(GameEngineState, _impl_.state_.freeform_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::hexzpb::GameEngineFlagzState>()},
    {::_pbi::TcParser::GetTable<::hexzpb::GameEngineClassicState>()},
    {::_pbi::TcParser::GetTable<::hexzpb::GameEngineFreeformState>()},
  }}, {{
  }},
};

::uint8_t* GameEngineState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.GameEngineState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (state_case()) {
    case kFlagz: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::flagz(this),
          _Internal::flagz(this).GetCachedSize(), target, stream);
      break;
    }
    case kClassic: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::classic(this),
          _Internal::classic(this).GetCachedSize(), target, stream);
      break;
    }
    case kFreeform: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::freeform(this),
          _Internal::freeform(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.GameEngineState)
  return target;
}

::size_t GameEngineState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.GameEngineState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (state_case()) {
    // .hexzpb.GameEngineFlagzState flagz = 1;
    case kFlagz: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.state_.flagz_);
      break;
    }
    // .hexzpb.GameEngineClassicState classic = 2;
    case kClassic: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.state_.classic_);
      break;
    }
    // .hexzpb.GameEngineFreeformState freeform = 3;
    case kFreeform: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.state_.freeform_);
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GameEngineState::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GameEngineState::MergeImpl
};
const ::google::protobuf::Message::ClassData*GameEngineState::GetClassData() const { return &_class_data_; }


void GameEngineState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GameEngineState*>(&to_msg);
  auto& from = static_cast<const GameEngineState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.GameEngineState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.state_case()) {
    case kFlagz: {
      _this->_internal_mutable_flagz()->::hexzpb::GameEngineFlagzState::MergeFrom(
          from._internal_flagz());
      break;
    }
    case kClassic: {
      _this->_internal_mutable_classic()->::hexzpb::GameEngineClassicState::MergeFrom(
          from._internal_classic());
      break;
    }
    case kFreeform: {
      _this->_internal_mutable_freeform()->::hexzpb::GameEngineFreeformState::MergeFrom(
          from._internal_freeform());
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEngineState::CopyFrom(const GameEngineState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.GameEngineState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEngineState::IsInitialized() const {
  return true;
}

void GameEngineState::InternalSwap(GameEngineState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.state_, other->_impl_.state_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata GameEngineState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[6]);
}
// ===================================================================

class GameEngineFlagzState::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEngineFlagzState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GameEngineFlagzState, _impl_._has_bits_);
  static const ::hexzpb::Board& board(const GameEngineFlagzState* msg);
  static void set_has_board(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hexzpb::Board& GameEngineFlagzState::_Internal::board(const GameEngineFlagzState* msg) {
  return *msg->_impl_.board_;
}
GameEngineFlagzState::GameEngineFlagzState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.GameEngineFlagzState)
}
GameEngineFlagzState::GameEngineFlagzState(const GameEngineFlagzState& from) : ::google::protobuf::Message() {
  GameEngineFlagzState* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.normal_moves_){from._impl_.normal_moves_},
      /* _impl_._normal_moves_cached_byte_size_ = */ {0},
      decltype(_impl_.moves_){from._impl_.moves_},
      decltype(_impl_.board_){nullptr},
      decltype(_impl_.free_cells_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.board_ = new ::hexzpb::Board(*from._impl_.board_);
  }
  _this->_impl_.free_cells_ = from._impl_.free_cells_;

  // @@protoc_insertion_point(copy_constructor:hexzpb.GameEngineFlagzState)
}
inline void GameEngineFlagzState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.normal_moves_){arena},
      /* _impl_._normal_moves_cached_byte_size_ = */ {0},
      decltype(_impl_.moves_){arena},
      decltype(_impl_.board_){nullptr},
      decltype(_impl_.free_cells_){0},
  };
}
GameEngineFlagzState::~GameEngineFlagzState() {
  // @@protoc_insertion_point(destructor:hexzpb.GameEngineFlagzState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEngineFlagzState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.normal_moves_.~RepeatedField();
  _impl_.moves_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.board_;
}
void GameEngineFlagzState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GameEngineFlagzState::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.GameEngineFlagzState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_normal_moves()->Clear();
  _internal_mutable_moves()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.board_ != nullptr);
    _impl_.board_->Clear();
  }
  _impl_.free_cells_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GameEngineFlagzState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> GameEngineFlagzState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEngineFlagzState, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GameEngineFlagzState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .hexzpb.GameEngineMove moves = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(GameEngineFlagzState, _impl_.moves_)}},
    // .hexzpb.Board board = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GameEngineFlagzState, _impl_.board_)}},
    // int32 free_cells = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEngineFlagzState, _impl_.free_cells_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GameEngineFlagzState, _impl_.free_cells_)}},
    // repeated int32 normal_moves = 3;
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(GameEngineFlagzState, _impl_.normal_moves_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .hexzpb.Board board = 1;
    {PROTOBUF_FIELD_OFFSET(GameEngineFlagzState, _impl_.board_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 free_cells = 2;
    {PROTOBUF_FIELD_OFFSET(GameEngineFlagzState, _impl_.free_cells_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated int32 normal_moves = 3;
    {PROTOBUF_FIELD_OFFSET(GameEngineFlagzState, _impl_.normal_moves_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated .hexzpb.GameEngineMove moves = 4;
    {PROTOBUF_FIELD_OFFSET(GameEngineFlagzState, _impl_.moves_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::hexzpb::Board>()},
    {::_pbi::TcParser::GetTable<::hexzpb::GameEngineMove>()},
  }}, {{
  }},
};

::uint8_t* GameEngineFlagzState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.GameEngineFlagzState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .hexzpb.Board board = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::board(this),
        _Internal::board(this).GetCachedSize(), target, stream);
  }

  // int32 free_cells = 2;
  if (this->_internal_free_cells() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_free_cells(), target);
  }

  // repeated int32 normal_moves = 3;
  {
    int byte_size = _impl_._normal_moves_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(3, _internal_normal_moves(),
                                                 byte_size, target);
    }
  }

  // repeated .hexzpb.GameEngineMove moves = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_moves_size()); i < n; i++) {
    const auto& repfield = this->_internal_moves().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.GameEngineFlagzState)
  return target;
}

::size_t GameEngineFlagzState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.GameEngineFlagzState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 normal_moves = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_normal_moves())
    ;
    _impl_._normal_moves_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated .hexzpb.GameEngineMove moves = 4;
  total_size += 1UL * this->_internal_moves_size();
  for (const auto& msg : this->_internal_moves()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .hexzpb.Board board = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.board_);
  }

  // int32 free_cells = 2;
  if (this->_internal_free_cells() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_free_cells());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GameEngineFlagzState::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GameEngineFlagzState::MergeImpl
};
const ::google::protobuf::Message::ClassData*GameEngineFlagzState::GetClassData() const { return &_class_data_; }


void GameEngineFlagzState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GameEngineFlagzState*>(&to_msg);
  auto& from = static_cast<const GameEngineFlagzState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.GameEngineFlagzState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_normal_moves()->MergeFrom(from._internal_normal_moves());
  _this->_internal_mutable_moves()->MergeFrom(from._internal_moves());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_board()->::hexzpb::Board::MergeFrom(
        from._internal_board());
  }
  if (from._internal_free_cells() != 0) {
    _this->_internal_set_free_cells(from._internal_free_cells());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEngineFlagzState::CopyFrom(const GameEngineFlagzState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.GameEngineFlagzState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEngineFlagzState::IsInitialized() const {
  return true;
}

void GameEngineFlagzState::InternalSwap(GameEngineFlagzState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.normal_moves_.InternalSwap(&other->_impl_.normal_moves_);
  _impl_.moves_.InternalSwap(&other->_impl_.moves_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEngineFlagzState, _impl_.free_cells_)
      + sizeof(GameEngineFlagzState::_impl_.free_cells_)
      - PROTOBUF_FIELD_OFFSET(GameEngineFlagzState, _impl_.board_)>(
          reinterpret_cast<char*>(&_impl_.board_),
          reinterpret_cast<char*>(&other->_impl_.board_));
}

::google::protobuf::Metadata GameEngineFlagzState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[7]);
}
// ===================================================================

class GameEngineClassicState::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEngineClassicState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GameEngineClassicState, _impl_._has_bits_);
  static const ::hexzpb::Board& board(const GameEngineClassicState* msg);
  static void set_has_board(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hexzpb::Board& GameEngineClassicState::_Internal::board(const GameEngineClassicState* msg) {
  return *msg->_impl_.board_;
}
GameEngineClassicState::GameEngineClassicState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.GameEngineClassicState)
}
GameEngineClassicState::GameEngineClassicState(const GameEngineClassicState& from) : ::google::protobuf::Message() {
  GameEngineClassicState* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.board_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.board_ = new ::hexzpb::Board(*from._impl_.board_);
  }

  // @@protoc_insertion_point(copy_constructor:hexzpb.GameEngineClassicState)
}
inline void GameEngineClassicState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.board_){nullptr},
  };
}
GameEngineClassicState::~GameEngineClassicState() {
  // @@protoc_insertion_point(destructor:hexzpb.GameEngineClassicState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEngineClassicState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.board_;
}
void GameEngineClassicState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GameEngineClassicState::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.GameEngineClassicState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.board_ != nullptr);
    _impl_.board_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GameEngineClassicState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GameEngineClassicState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEngineClassicState, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GameEngineClassicState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .hexzpb.Board board = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GameEngineClassicState, _impl_.board_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .hexzpb.Board board = 1;
    {PROTOBUF_FIELD_OFFSET(GameEngineClassicState, _impl_.board_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::hexzpb::Board>()},
  }}, {{
  }},
};

::uint8_t* GameEngineClassicState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.GameEngineClassicState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .hexzpb.Board board = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::board(this),
        _Internal::board(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.GameEngineClassicState)
  return target;
}

::size_t GameEngineClassicState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.GameEngineClassicState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hexzpb.Board board = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.board_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GameEngineClassicState::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GameEngineClassicState::MergeImpl
};
const ::google::protobuf::Message::ClassData*GameEngineClassicState::GetClassData() const { return &_class_data_; }


void GameEngineClassicState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GameEngineClassicState*>(&to_msg);
  auto& from = static_cast<const GameEngineClassicState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.GameEngineClassicState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_board()->::hexzpb::Board::MergeFrom(
        from._internal_board());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEngineClassicState::CopyFrom(const GameEngineClassicState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.GameEngineClassicState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEngineClassicState::IsInitialized() const {
  return true;
}

void GameEngineClassicState::InternalSwap(GameEngineClassicState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.board_, other->_impl_.board_);
}

::google::protobuf::Metadata GameEngineClassicState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[8]);
}
// ===================================================================

class GameEngineFreeformState::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEngineFreeformState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GameEngineFreeformState, _impl_._has_bits_);
  static const ::hexzpb::Board& board(const GameEngineFreeformState* msg);
  static void set_has_board(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hexzpb::Board& GameEngineFreeformState::_Internal::board(const GameEngineFreeformState* msg) {
  return *msg->_impl_.board_;
}
GameEngineFreeformState::GameEngineFreeformState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.GameEngineFreeformState)
}
GameEngineFreeformState::GameEngineFreeformState(const GameEngineFreeformState& from) : ::google::protobuf::Message() {
  GameEngineFreeformState* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.board_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.board_ = new ::hexzpb::Board(*from._impl_.board_);
  }

  // @@protoc_insertion_point(copy_constructor:hexzpb.GameEngineFreeformState)
}
inline void GameEngineFreeformState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.board_){nullptr},
  };
}
GameEngineFreeformState::~GameEngineFreeformState() {
  // @@protoc_insertion_point(destructor:hexzpb.GameEngineFreeformState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEngineFreeformState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.board_;
}
void GameEngineFreeformState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GameEngineFreeformState::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.GameEngineFreeformState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.board_ != nullptr);
    _impl_.board_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GameEngineFreeformState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GameEngineFreeformState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEngineFreeformState, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GameEngineFreeformState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .hexzpb.Board board = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GameEngineFreeformState, _impl_.board_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .hexzpb.Board board = 1;
    {PROTOBUF_FIELD_OFFSET(GameEngineFreeformState, _impl_.board_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::hexzpb::Board>()},
  }}, {{
  }},
};

::uint8_t* GameEngineFreeformState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.GameEngineFreeformState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .hexzpb.Board board = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::board(this),
        _Internal::board(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.GameEngineFreeformState)
  return target;
}

::size_t GameEngineFreeformState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.GameEngineFreeformState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hexzpb.Board board = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.board_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GameEngineFreeformState::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GameEngineFreeformState::MergeImpl
};
const ::google::protobuf::Message::ClassData*GameEngineFreeformState::GetClassData() const { return &_class_data_; }


void GameEngineFreeformState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GameEngineFreeformState*>(&to_msg);
  auto& from = static_cast<const GameEngineFreeformState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.GameEngineFreeformState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_board()->::hexzpb::Board::MergeFrom(
        from._internal_board());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEngineFreeformState::CopyFrom(const GameEngineFreeformState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.GameEngineFreeformState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEngineFreeformState::IsInitialized() const {
  return true;
}

void GameEngineFreeformState::InternalSwap(GameEngineFreeformState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.board_, other->_impl_.board_);
}

::google::protobuf::Metadata GameEngineFreeformState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[9]);
}
// ===================================================================

class GameEngineMove::_Internal {
 public:
};

GameEngineMove::GameEngineMove(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.GameEngineMove)
}
GameEngineMove::GameEngineMove(const GameEngineMove& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hexzpb.GameEngineMove)
}
inline void GameEngineMove::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.player_num_){0},
      decltype(_impl_.move_){0},
      decltype(_impl_.row_){0},
      decltype(_impl_.col_){0},
      decltype(_impl_.cell_type_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
GameEngineMove::~GameEngineMove() {
  // @@protoc_insertion_point(destructor:hexzpb.GameEngineMove)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEngineMove::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void GameEngineMove::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GameEngineMove::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.GameEngineMove)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_num_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cell_type_) -
      reinterpret_cast<char*>(&_impl_.player_num_)) + sizeof(_impl_.cell_type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GameEngineMove::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> GameEngineMove::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GameEngineMove_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 player_num = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEngineMove, _impl_.player_num_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GameEngineMove, _impl_.player_num_)}},
    // int32 move = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEngineMove, _impl_.move_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GameEngineMove, _impl_.move_)}},
    // int32 row = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEngineMove, _impl_.row_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GameEngineMove, _impl_.row_)}},
    // int32 col = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEngineMove, _impl_.col_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GameEngineMove, _impl_.col_)}},
    // .hexzpb.Field.CellType cell_type = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEngineMove, _impl_.cell_type_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(GameEngineMove, _impl_.cell_type_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 player_num = 1;
    {PROTOBUF_FIELD_OFFSET(GameEngineMove, _impl_.player_num_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 move = 2;
    {PROTOBUF_FIELD_OFFSET(GameEngineMove, _impl_.move_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 row = 3;
    {PROTOBUF_FIELD_OFFSET(GameEngineMove, _impl_.row_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 col = 4;
    {PROTOBUF_FIELD_OFFSET(GameEngineMove, _impl_.col_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .hexzpb.Field.CellType cell_type = 5;
    {PROTOBUF_FIELD_OFFSET(GameEngineMove, _impl_.cell_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* GameEngineMove::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.GameEngineMove)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 player_num = 1;
  if (this->_internal_player_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_player_num(), target);
  }

  // int32 move = 2;
  if (this->_internal_move() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_move(), target);
  }

  // int32 row = 3;
  if (this->_internal_row() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_row(), target);
  }

  // int32 col = 4;
  if (this->_internal_col() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_col(), target);
  }

  // .hexzpb.Field.CellType cell_type = 5;
  if (this->_internal_cell_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_cell_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.GameEngineMove)
  return target;
}

::size_t GameEngineMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.GameEngineMove)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_num = 1;
  if (this->_internal_player_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_player_num());
  }

  // int32 move = 2;
  if (this->_internal_move() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_move());
  }

  // int32 row = 3;
  if (this->_internal_row() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_row());
  }

  // int32 col = 4;
  if (this->_internal_col() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_col());
  }

  // .hexzpb.Field.CellType cell_type = 5;
  if (this->_internal_cell_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_cell_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GameEngineMove::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GameEngineMove::MergeImpl
};
const ::google::protobuf::Message::ClassData*GameEngineMove::GetClassData() const { return &_class_data_; }


void GameEngineMove::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GameEngineMove*>(&to_msg);
  auto& from = static_cast<const GameEngineMove&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.GameEngineMove)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_num() != 0) {
    _this->_internal_set_player_num(from._internal_player_num());
  }
  if (from._internal_move() != 0) {
    _this->_internal_set_move(from._internal_move());
  }
  if (from._internal_row() != 0) {
    _this->_internal_set_row(from._internal_row());
  }
  if (from._internal_col() != 0) {
    _this->_internal_set_col(from._internal_col());
  }
  if (from._internal_cell_type() != 0) {
    _this->_internal_set_cell_type(from._internal_cell_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEngineMove::CopyFrom(const GameEngineMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.GameEngineMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEngineMove::IsInitialized() const {
  return true;
}

void GameEngineMove::InternalSwap(GameEngineMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEngineMove, _impl_.cell_type_)
      + sizeof(GameEngineMove::_impl_.cell_type_)
      - PROTOBUF_FIELD_OFFSET(GameEngineMove, _impl_.player_num_)>(
          reinterpret_cast<char*>(&_impl_.player_num_),
          reinterpret_cast<char*>(&other->_impl_.player_num_));
}

::google::protobuf::Metadata GameEngineMove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[10]);
}
// ===================================================================

class MCTSExample_MoveStats::_Internal {
 public:
  using HasBits = decltype(std::declval<MCTSExample_MoveStats>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MCTSExample_MoveStats, _impl_._has_bits_);
  static const ::hexzpb::GameEngineMove& move(const MCTSExample_MoveStats* msg);
  static void set_has_move(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hexzpb::GameEngineMove& MCTSExample_MoveStats::_Internal::move(const MCTSExample_MoveStats* msg) {
  return *msg->_impl_.move_;
}
MCTSExample_MoveStats::MCTSExample_MoveStats(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.MCTSExample.MoveStats)
}
MCTSExample_MoveStats::MCTSExample_MoveStats(const MCTSExample_MoveStats& from) : ::google::protobuf::Message() {
  MCTSExample_MoveStats* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.move_){nullptr},
      decltype(_impl_.visits_){},
      decltype(_impl_.win_rate_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.move_ = new ::hexzpb::GameEngineMove(*from._impl_.move_);
  }
  ::memcpy(&_impl_.visits_, &from._impl_.visits_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.win_rate_) -
    reinterpret_cast<char*>(&_impl_.visits_)) + sizeof(_impl_.win_rate_));

  // @@protoc_insertion_point(copy_constructor:hexzpb.MCTSExample.MoveStats)
}
inline void MCTSExample_MoveStats::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.move_){nullptr},
      decltype(_impl_.visits_){0},
      decltype(_impl_.win_rate_){0},
  };
}
MCTSExample_MoveStats::~MCTSExample_MoveStats() {
  // @@protoc_insertion_point(destructor:hexzpb.MCTSExample.MoveStats)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MCTSExample_MoveStats::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.move_;
}
void MCTSExample_MoveStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MCTSExample_MoveStats::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.MCTSExample.MoveStats)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.move_ != nullptr);
    _impl_.move_->Clear();
  }
  ::memset(&_impl_.visits_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.win_rate_) -
      reinterpret_cast<char*>(&_impl_.visits_)) + sizeof(_impl_.win_rate_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MCTSExample_MoveStats::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> MCTSExample_MoveStats::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MCTSExample_MoveStats, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MCTSExample_MoveStats_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .hexzpb.GameEngineMove move = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MCTSExample_MoveStats, _impl_.move_)}},
    // int32 visits = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MCTSExample_MoveStats, _impl_.visits_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MCTSExample_MoveStats, _impl_.visits_)}},
    // float win_rate = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(MCTSExample_MoveStats, _impl_.win_rate_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .hexzpb.GameEngineMove move = 1;
    {PROTOBUF_FIELD_OFFSET(MCTSExample_MoveStats, _impl_.move_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 visits = 2;
    {PROTOBUF_FIELD_OFFSET(MCTSExample_MoveStats, _impl_.visits_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float win_rate = 3;
    {PROTOBUF_FIELD_OFFSET(MCTSExample_MoveStats, _impl_.win_rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::hexzpb::GameEngineMove>()},
  }}, {{
  }},
};

::uint8_t* MCTSExample_MoveStats::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.MCTSExample.MoveStats)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .hexzpb.GameEngineMove move = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::move(this),
        _Internal::move(this).GetCachedSize(), target, stream);
  }

  // int32 visits = 2;
  if (this->_internal_visits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_visits(), target);
  }

  // float win_rate = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_win_rate = this->_internal_win_rate();
  ::uint32_t raw_win_rate;
  memcpy(&raw_win_rate, &tmp_win_rate, sizeof(tmp_win_rate));
  if (raw_win_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_win_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.MCTSExample.MoveStats)
  return target;
}

::size_t MCTSExample_MoveStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.MCTSExample.MoveStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hexzpb.GameEngineMove move = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.move_);
  }

  // int32 visits = 2;
  if (this->_internal_visits() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_visits());
  }

  // float win_rate = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_win_rate = this->_internal_win_rate();
  ::uint32_t raw_win_rate;
  memcpy(&raw_win_rate, &tmp_win_rate, sizeof(tmp_win_rate));
  if (raw_win_rate != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MCTSExample_MoveStats::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MCTSExample_MoveStats::MergeImpl
};
const ::google::protobuf::Message::ClassData*MCTSExample_MoveStats::GetClassData() const { return &_class_data_; }


void MCTSExample_MoveStats::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MCTSExample_MoveStats*>(&to_msg);
  auto& from = static_cast<const MCTSExample_MoveStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.MCTSExample.MoveStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_move()->::hexzpb::GameEngineMove::MergeFrom(
        from._internal_move());
  }
  if (from._internal_visits() != 0) {
    _this->_internal_set_visits(from._internal_visits());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_win_rate = from._internal_win_rate();
  ::uint32_t raw_win_rate;
  memcpy(&raw_win_rate, &tmp_win_rate, sizeof(tmp_win_rate));
  if (raw_win_rate != 0) {
    _this->_internal_set_win_rate(from._internal_win_rate());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MCTSExample_MoveStats::CopyFrom(const MCTSExample_MoveStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.MCTSExample.MoveStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MCTSExample_MoveStats::IsInitialized() const {
  return true;
}

void MCTSExample_MoveStats::InternalSwap(MCTSExample_MoveStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MCTSExample_MoveStats, _impl_.win_rate_)
      + sizeof(MCTSExample_MoveStats::_impl_.win_rate_)
      - PROTOBUF_FIELD_OFFSET(MCTSExample_MoveStats, _impl_.move_)>(
          reinterpret_cast<char*>(&_impl_.move_),
          reinterpret_cast<char*>(&other->_impl_.move_));
}

::google::protobuf::Metadata MCTSExample_MoveStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[11]);
}
// ===================================================================

class MCTSExample::_Internal {
 public:
  using HasBits = decltype(std::declval<MCTSExample>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MCTSExample, _impl_._has_bits_);
  static const ::hexzpb::Board& board(const MCTSExample* msg);
  static void set_has_board(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hexzpb::Board& MCTSExample::_Internal::board(const MCTSExample* msg) {
  return *msg->_impl_.board_;
}
MCTSExample::MCTSExample(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.MCTSExample)
}
MCTSExample::MCTSExample(const MCTSExample& from) : ::google::protobuf::Message() {
  MCTSExample* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.result_){from._impl_.result_},
      /* _impl_._result_cached_byte_size_ = */ {0},
      decltype(_impl_.move_stats_){from._impl_.move_stats_},
      decltype(_impl_.game_id_){},
      decltype(_impl_.board_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.game_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.game_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_game_id().empty()) {
    _this->_impl_.game_id_.Set(from._internal_game_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.board_ = new ::hexzpb::Board(*from._impl_.board_);
  }

  // @@protoc_insertion_point(copy_constructor:hexzpb.MCTSExample)
}
inline void MCTSExample::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.result_){arena},
      /* _impl_._result_cached_byte_size_ = */ {0},
      decltype(_impl_.move_stats_){arena},
      decltype(_impl_.game_id_){},
      decltype(_impl_.board_){nullptr},
  };
  _impl_.game_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.game_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
MCTSExample::~MCTSExample() {
  // @@protoc_insertion_point(destructor:hexzpb.MCTSExample)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MCTSExample::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.~RepeatedField();
  _impl_.move_stats_.~RepeatedPtrField();
  _impl_.game_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.board_;
}
void MCTSExample::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MCTSExample::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.MCTSExample)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_result()->Clear();
  _internal_mutable_move_stats()->Clear();
  _impl_.game_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.board_ != nullptr);
    _impl_.board_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MCTSExample::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 34, 2> MCTSExample::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MCTSExample, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MCTSExample_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .hexzpb.MCTSExample.MoveStats move_stats = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(MCTSExample, _impl_.move_stats_)}},
    // string game_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MCTSExample, _impl_.game_id_)}},
    // .hexzpb.Board board = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MCTSExample, _impl_.board_)}},
    // repeated int32 result = 3;
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(MCTSExample, _impl_.result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string game_id = 1;
    {PROTOBUF_FIELD_OFFSET(MCTSExample, _impl_.game_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .hexzpb.Board board = 2;
    {PROTOBUF_FIELD_OFFSET(MCTSExample, _impl_.board_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated int32 result = 3;
    {PROTOBUF_FIELD_OFFSET(MCTSExample, _impl_.result_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated .hexzpb.MCTSExample.MoveStats move_stats = 4;
    {PROTOBUF_FIELD_OFFSET(MCTSExample, _impl_.move_stats_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::hexzpb::Board>()},
    {::_pbi::TcParser::GetTable<::hexzpb::MCTSExample_MoveStats>()},
  }}, {{
    "\22\7\0\0\0\0\0\0"
    "hexzpb.MCTSExample"
    "game_id"
  }},
};

::uint8_t* MCTSExample::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.MCTSExample)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string game_id = 1;
  if (!this->_internal_game_id().empty()) {
    const std::string& _s = this->_internal_game_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hexzpb.MCTSExample.game_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .hexzpb.Board board = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::board(this),
        _Internal::board(this).GetCachedSize(), target, stream);
  }

  // repeated int32 result = 3;
  {
    int byte_size = _impl_._result_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(3, _internal_result(),
                                                 byte_size, target);
    }
  }

  // repeated .hexzpb.MCTSExample.MoveStats move_stats = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_move_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_move_stats().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.MCTSExample)
  return target;
}

::size_t MCTSExample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.MCTSExample)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 result = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_result())
    ;
    _impl_._result_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated .hexzpb.MCTSExample.MoveStats move_stats = 4;
  total_size += 1UL * this->_internal_move_stats_size();
  for (const auto& msg : this->_internal_move_stats()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string game_id = 1;
  if (!this->_internal_game_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_game_id());
  }

  // .hexzpb.Board board = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.board_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MCTSExample::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MCTSExample::MergeImpl
};
const ::google::protobuf::Message::ClassData*MCTSExample::GetClassData() const { return &_class_data_; }


void MCTSExample::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MCTSExample*>(&to_msg);
  auto& from = static_cast<const MCTSExample&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.MCTSExample)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_result()->MergeFrom(from._internal_result());
  _this->_internal_mutable_move_stats()->MergeFrom(from._internal_move_stats());
  if (!from._internal_game_id().empty()) {
    _this->_internal_set_game_id(from._internal_game_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_board()->::hexzpb::Board::MergeFrom(
        from._internal_board());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MCTSExample::CopyFrom(const MCTSExample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.MCTSExample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MCTSExample::IsInitialized() const {
  return true;
}

void MCTSExample::InternalSwap(MCTSExample* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.result_.InternalSwap(&other->_impl_.result_);
  _impl_.move_stats_.InternalSwap(&other->_impl_.move_stats_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.game_id_, lhs_arena,
                                       &other->_impl_.game_id_, rhs_arena);
  swap(_impl_.board_, other->_impl_.board_);
}

::google::protobuf::Metadata MCTSExample::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[12]);
}
// ===================================================================

class SuggestMoveRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SuggestMoveRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SuggestMoveRequest, _impl_._has_bits_);
  static const ::hexzpb::GameEngineState& game_engine_state(const SuggestMoveRequest* msg);
  static void set_has_game_engine_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hexzpb::GameEngineState& SuggestMoveRequest::_Internal::game_engine_state(const SuggestMoveRequest* msg) {
  return *msg->_impl_.game_engine_state_;
}
SuggestMoveRequest::SuggestMoveRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.SuggestMoveRequest)
}
SuggestMoveRequest::SuggestMoveRequest(const SuggestMoveRequest& from) : ::google::protobuf::Message() {
  SuggestMoveRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.game_engine_state_){nullptr},
      decltype(_impl_.max_think_time_ms_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.game_engine_state_ = new ::hexzpb::GameEngineState(*from._impl_.game_engine_state_);
  }
  _this->_impl_.max_think_time_ms_ = from._impl_.max_think_time_ms_;

  // @@protoc_insertion_point(copy_constructor:hexzpb.SuggestMoveRequest)
}
inline void SuggestMoveRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.game_engine_state_){nullptr},
      decltype(_impl_.max_think_time_ms_){::int64_t{0}},
  };
}
SuggestMoveRequest::~SuggestMoveRequest() {
  // @@protoc_insertion_point(destructor:hexzpb.SuggestMoveRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SuggestMoveRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.game_engine_state_;
}
void SuggestMoveRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SuggestMoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.SuggestMoveRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.game_engine_state_ != nullptr);
    _impl_.game_engine_state_->Clear();
  }
  _impl_.max_think_time_ms_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SuggestMoveRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> SuggestMoveRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SuggestMoveRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SuggestMoveRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .hexzpb.GameEngineState game_engine_state = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(SuggestMoveRequest, _impl_.game_engine_state_)}},
    // int64 max_think_time_ms = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SuggestMoveRequest, _impl_.max_think_time_ms_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SuggestMoveRequest, _impl_.max_think_time_ms_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 max_think_time_ms = 1;
    {PROTOBUF_FIELD_OFFSET(SuggestMoveRequest, _impl_.max_think_time_ms_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .hexzpb.GameEngineState game_engine_state = 2;
    {PROTOBUF_FIELD_OFFSET(SuggestMoveRequest, _impl_.game_engine_state_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::hexzpb::GameEngineState>()},
  }}, {{
  }},
};

::uint8_t* SuggestMoveRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.SuggestMoveRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 max_think_time_ms = 1;
  if (this->_internal_max_think_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_max_think_time_ms(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .hexzpb.GameEngineState game_engine_state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::game_engine_state(this),
        _Internal::game_engine_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.SuggestMoveRequest)
  return target;
}

::size_t SuggestMoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.SuggestMoveRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hexzpb.GameEngineState game_engine_state = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.game_engine_state_);
  }

  // int64 max_think_time_ms = 1;
  if (this->_internal_max_think_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_max_think_time_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SuggestMoveRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SuggestMoveRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*SuggestMoveRequest::GetClassData() const { return &_class_data_; }


void SuggestMoveRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SuggestMoveRequest*>(&to_msg);
  auto& from = static_cast<const SuggestMoveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.SuggestMoveRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_game_engine_state()->::hexzpb::GameEngineState::MergeFrom(
        from._internal_game_engine_state());
  }
  if (from._internal_max_think_time_ms() != 0) {
    _this->_internal_set_max_think_time_ms(from._internal_max_think_time_ms());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SuggestMoveRequest::CopyFrom(const SuggestMoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.SuggestMoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SuggestMoveRequest::IsInitialized() const {
  return true;
}

void SuggestMoveRequest::InternalSwap(SuggestMoveRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SuggestMoveRequest, _impl_.max_think_time_ms_)
      + sizeof(SuggestMoveRequest::_impl_.max_think_time_ms_)
      - PROTOBUF_FIELD_OFFSET(SuggestMoveRequest, _impl_.game_engine_state_)>(
          reinterpret_cast<char*>(&_impl_.game_engine_state_),
          reinterpret_cast<char*>(&other->_impl_.game_engine_state_));
}

::google::protobuf::Metadata SuggestMoveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[13]);
}
// ===================================================================

class SuggestMoveStats_Score::_Internal {
 public:
};

SuggestMoveStats_Score::SuggestMoveStats_Score(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.SuggestMoveStats.Score)
}
SuggestMoveStats_Score::SuggestMoveStats_Score(const SuggestMoveStats_Score& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hexzpb.SuggestMoveStats.Score)
}
inline void SuggestMoveStats_Score::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){0},
      decltype(_impl_.score_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
SuggestMoveStats_Score::~SuggestMoveStats_Score() {
  // @@protoc_insertion_point(destructor:hexzpb.SuggestMoveStats.Score)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SuggestMoveStats_Score::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void SuggestMoveStats_Score::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SuggestMoveStats_Score::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.SuggestMoveStats.Score)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.kind_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.score_) -
      reinterpret_cast<char*>(&_impl_.kind_)) + sizeof(_impl_.score_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SuggestMoveStats_Score::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> SuggestMoveStats_Score::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SuggestMoveStats_Score_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float score = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(SuggestMoveStats_Score, _impl_.score_)}},
    // .hexzpb.SuggestMoveStats.ScoreKind kind = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SuggestMoveStats_Score, _impl_.kind_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SuggestMoveStats_Score, _impl_.kind_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .hexzpb.SuggestMoveStats.ScoreKind kind = 1;
    {PROTOBUF_FIELD_OFFSET(SuggestMoveStats_Score, _impl_.kind_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // float score = 2;
    {PROTOBUF_FIELD_OFFSET(SuggestMoveStats_Score, _impl_.score_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SuggestMoveStats_Score::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.SuggestMoveStats.Score)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .hexzpb.SuggestMoveStats.ScoreKind kind = 1;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_kind(), target);
  }

  // float score = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  ::uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.SuggestMoveStats.Score)
  return target;
}

::size_t SuggestMoveStats_Score::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.SuggestMoveStats.Score)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hexzpb.SuggestMoveStats.ScoreKind kind = 1;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  // float score = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  ::uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SuggestMoveStats_Score::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SuggestMoveStats_Score::MergeImpl
};
const ::google::protobuf::Message::ClassData*SuggestMoveStats_Score::GetClassData() const { return &_class_data_; }


void SuggestMoveStats_Score::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SuggestMoveStats_Score*>(&to_msg);
  auto& from = static_cast<const SuggestMoveStats_Score&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.SuggestMoveStats.Score)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_kind() != 0) {
    _this->_internal_set_kind(from._internal_kind());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_score = from._internal_score();
  ::uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SuggestMoveStats_Score::CopyFrom(const SuggestMoveStats_Score& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.SuggestMoveStats.Score)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SuggestMoveStats_Score::IsInitialized() const {
  return true;
}

void SuggestMoveStats_Score::InternalSwap(SuggestMoveStats_Score* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SuggestMoveStats_Score, _impl_.score_)
      + sizeof(SuggestMoveStats_Score::_impl_.score_)
      - PROTOBUF_FIELD_OFFSET(SuggestMoveStats_Score, _impl_.kind_)>(
          reinterpret_cast<char*>(&_impl_.kind_),
          reinterpret_cast<char*>(&other->_impl_.kind_));
}

::google::protobuf::Metadata SuggestMoveStats_Score::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[14]);
}
// ===================================================================

class SuggestMoveStats_ScoredMove::_Internal {
 public:
};

SuggestMoveStats_ScoredMove::SuggestMoveStats_ScoredMove(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.SuggestMoveStats.ScoredMove)
}
SuggestMoveStats_ScoredMove::SuggestMoveStats_ScoredMove(const SuggestMoveStats_ScoredMove& from) : ::google::protobuf::Message() {
  SuggestMoveStats_ScoredMove* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scores_){from._impl_.scores_},
      decltype(_impl_.row_){},
      decltype(_impl_.col_){},
      decltype(_impl_.type_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.row_, &from._impl_.row_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.row_)) + sizeof(_impl_.type_));

  // @@protoc_insertion_point(copy_constructor:hexzpb.SuggestMoveStats.ScoredMove)
}
inline void SuggestMoveStats_ScoredMove::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.scores_){arena},
      decltype(_impl_.row_){0},
      decltype(_impl_.col_){0},
      decltype(_impl_.type_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
SuggestMoveStats_ScoredMove::~SuggestMoveStats_ScoredMove() {
  // @@protoc_insertion_point(destructor:hexzpb.SuggestMoveStats.ScoredMove)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SuggestMoveStats_ScoredMove::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.scores_.~RepeatedPtrField();
}
void SuggestMoveStats_ScoredMove::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SuggestMoveStats_ScoredMove::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.SuggestMoveStats.ScoredMove)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_scores()->Clear();
  ::memset(&_impl_.row_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.row_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SuggestMoveStats_ScoredMove::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> SuggestMoveStats_ScoredMove::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SuggestMoveStats_ScoredMove_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .hexzpb.SuggestMoveStats.Score scores = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(SuggestMoveStats_ScoredMove, _impl_.scores_)}},
    // int32 row = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SuggestMoveStats_ScoredMove, _impl_.row_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SuggestMoveStats_ScoredMove, _impl_.row_)}},
    // int32 col = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SuggestMoveStats_ScoredMove, _impl_.col_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SuggestMoveStats_ScoredMove, _impl_.col_)}},
    // .hexzpb.Field.CellType type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SuggestMoveStats_ScoredMove, _impl_.type_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SuggestMoveStats_ScoredMove, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 row = 1;
    {PROTOBUF_FIELD_OFFSET(SuggestMoveStats_ScoredMove, _impl_.row_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 col = 2;
    {PROTOBUF_FIELD_OFFSET(SuggestMoveStats_ScoredMove, _impl_.col_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .hexzpb.Field.CellType type = 3;
    {PROTOBUF_FIELD_OFFSET(SuggestMoveStats_ScoredMove, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated .hexzpb.SuggestMoveStats.Score scores = 4;
    {PROTOBUF_FIELD_OFFSET(SuggestMoveStats_ScoredMove, _impl_.scores_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::hexzpb::SuggestMoveStats_Score>()},
  }}, {{
  }},
};

::uint8_t* SuggestMoveStats_ScoredMove::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.SuggestMoveStats.ScoredMove)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 row = 1;
  if (this->_internal_row() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_row(), target);
  }

  // int32 col = 2;
  if (this->_internal_col() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_col(), target);
  }

  // .hexzpb.Field.CellType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_type(), target);
  }

  // repeated .hexzpb.SuggestMoveStats.Score scores = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_scores_size()); i < n; i++) {
    const auto& repfield = this->_internal_scores().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.SuggestMoveStats.ScoredMove)
  return target;
}

::size_t SuggestMoveStats_ScoredMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.SuggestMoveStats.ScoredMove)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hexzpb.SuggestMoveStats.Score scores = 4;
  total_size += 1UL * this->_internal_scores_size();
  for (const auto& msg : this->_internal_scores()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // int32 row = 1;
  if (this->_internal_row() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_row());
  }

  // int32 col = 2;
  if (this->_internal_col() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_col());
  }

  // .hexzpb.Field.CellType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SuggestMoveStats_ScoredMove::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SuggestMoveStats_ScoredMove::MergeImpl
};
const ::google::protobuf::Message::ClassData*SuggestMoveStats_ScoredMove::GetClassData() const { return &_class_data_; }


void SuggestMoveStats_ScoredMove::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SuggestMoveStats_ScoredMove*>(&to_msg);
  auto& from = static_cast<const SuggestMoveStats_ScoredMove&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.SuggestMoveStats.ScoredMove)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_scores()->MergeFrom(from._internal_scores());
  if (from._internal_row() != 0) {
    _this->_internal_set_row(from._internal_row());
  }
  if (from._internal_col() != 0) {
    _this->_internal_set_col(from._internal_col());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SuggestMoveStats_ScoredMove::CopyFrom(const SuggestMoveStats_ScoredMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.SuggestMoveStats.ScoredMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SuggestMoveStats_ScoredMove::IsInitialized() const {
  return true;
}

void SuggestMoveStats_ScoredMove::InternalSwap(SuggestMoveStats_ScoredMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.scores_.InternalSwap(&other->_impl_.scores_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SuggestMoveStats_ScoredMove, _impl_.type_)
      + sizeof(SuggestMoveStats_ScoredMove::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SuggestMoveStats_ScoredMove, _impl_.row_)>(
          reinterpret_cast<char*>(&_impl_.row_),
          reinterpret_cast<char*>(&other->_impl_.row_));
}

::google::protobuf::Metadata SuggestMoveStats_ScoredMove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[15]);
}
// ===================================================================

class SuggestMoveStats::_Internal {
 public:
};

SuggestMoveStats::SuggestMoveStats(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.SuggestMoveStats)
}
SuggestMoveStats::SuggestMoveStats(const SuggestMoveStats& from) : ::google::protobuf::Message() {
  SuggestMoveStats* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.moves_){from._impl_.moves_},
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;

  // @@protoc_insertion_point(copy_constructor:hexzpb.SuggestMoveStats)
}
inline void SuggestMoveStats::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.moves_){arena},
      decltype(_impl_.value_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
SuggestMoveStats::~SuggestMoveStats() {
  // @@protoc_insertion_point(destructor:hexzpb.SuggestMoveStats)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SuggestMoveStats::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.moves_.~RepeatedPtrField();
}
void SuggestMoveStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SuggestMoveStats::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.SuggestMoveStats)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_moves()->Clear();
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SuggestMoveStats::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> SuggestMoveStats::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SuggestMoveStats_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float value = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(SuggestMoveStats, _impl_.value_)}},
    // repeated .hexzpb.SuggestMoveStats.ScoredMove moves = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SuggestMoveStats, _impl_.moves_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .hexzpb.SuggestMoveStats.ScoredMove moves = 1;
    {PROTOBUF_FIELD_OFFSET(SuggestMoveStats, _impl_.moves_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // float value = 2;
    {PROTOBUF_FIELD_OFFSET(SuggestMoveStats, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::hexzpb::SuggestMoveStats_ScoredMove>()},
  }}, {{
  }},
};

::uint8_t* SuggestMoveStats::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.SuggestMoveStats)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .hexzpb.SuggestMoveStats.ScoredMove moves = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_moves_size()); i < n; i++) {
    const auto& repfield = this->_internal_moves().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // float value = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  ::uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.SuggestMoveStats)
  return target;
}

::size_t SuggestMoveStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.SuggestMoveStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hexzpb.SuggestMoveStats.ScoredMove moves = 1;
  total_size += 1UL * this->_internal_moves_size();
  for (const auto& msg : this->_internal_moves()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // float value = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  ::uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SuggestMoveStats::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SuggestMoveStats::MergeImpl
};
const ::google::protobuf::Message::ClassData*SuggestMoveStats::GetClassData() const { return &_class_data_; }


void SuggestMoveStats::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SuggestMoveStats*>(&to_msg);
  auto& from = static_cast<const SuggestMoveStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.SuggestMoveStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_moves()->MergeFrom(from._internal_moves());
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  ::uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SuggestMoveStats::CopyFrom(const SuggestMoveStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.SuggestMoveStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SuggestMoveStats::IsInitialized() const {
  return true;
}

void SuggestMoveStats::InternalSwap(SuggestMoveStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.moves_.InternalSwap(&other->_impl_.moves_);
        swap(_impl_.value_, other->_impl_.value_);
}

::google::protobuf::Metadata SuggestMoveStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[16]);
}
// ===================================================================

class SuggestMoveResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SuggestMoveResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SuggestMoveResponse, _impl_._has_bits_);
  static const ::hexzpb::GameEngineMove& move(const SuggestMoveResponse* msg);
  static void set_has_move(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hexzpb::SuggestMoveStats& move_stats(const SuggestMoveResponse* msg);
  static void set_has_move_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hexzpb::GameEngineMove& SuggestMoveResponse::_Internal::move(const SuggestMoveResponse* msg) {
  return *msg->_impl_.move_;
}
const ::hexzpb::SuggestMoveStats& SuggestMoveResponse::_Internal::move_stats(const SuggestMoveResponse* msg) {
  return *msg->_impl_.move_stats_;
}
SuggestMoveResponse::SuggestMoveResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.SuggestMoveResponse)
}
SuggestMoveResponse::SuggestMoveResponse(const SuggestMoveResponse& from) : ::google::protobuf::Message() {
  SuggestMoveResponse* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.move_){nullptr},
      decltype(_impl_.move_stats_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.move_ = new ::hexzpb::GameEngineMove(*from._impl_.move_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.move_stats_ = new ::hexzpb::SuggestMoveStats(*from._impl_.move_stats_);
  }

  // @@protoc_insertion_point(copy_constructor:hexzpb.SuggestMoveResponse)
}
inline void SuggestMoveResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.move_){nullptr},
      decltype(_impl_.move_stats_){nullptr},
  };
}
SuggestMoveResponse::~SuggestMoveResponse() {
  // @@protoc_insertion_point(destructor:hexzpb.SuggestMoveResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SuggestMoveResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.move_;
  if (this != internal_default_instance()) delete _impl_.move_stats_;
}
void SuggestMoveResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SuggestMoveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.SuggestMoveResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.move_ != nullptr);
      _impl_.move_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.move_stats_ != nullptr);
      _impl_.move_stats_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SuggestMoveResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> SuggestMoveResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SuggestMoveResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SuggestMoveResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .hexzpb.SuggestMoveStats move_stats = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SuggestMoveResponse, _impl_.move_stats_)}},
    // .hexzpb.GameEngineMove move = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SuggestMoveResponse, _impl_.move_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .hexzpb.GameEngineMove move = 1;
    {PROTOBUF_FIELD_OFFSET(SuggestMoveResponse, _impl_.move_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hexzpb.SuggestMoveStats move_stats = 2;
    {PROTOBUF_FIELD_OFFSET(SuggestMoveResponse, _impl_.move_stats_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::hexzpb::GameEngineMove>()},
    {::_pbi::TcParser::GetTable<::hexzpb::SuggestMoveStats>()},
  }}, {{
  }},
};

::uint8_t* SuggestMoveResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.SuggestMoveResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .hexzpb.GameEngineMove move = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::move(this),
        _Internal::move(this).GetCachedSize(), target, stream);
  }

  // .hexzpb.SuggestMoveStats move_stats = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::move_stats(this),
        _Internal::move_stats(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.SuggestMoveResponse)
  return target;
}

::size_t SuggestMoveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.SuggestMoveResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .hexzpb.GameEngineMove move = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.move_);
    }

    // .hexzpb.SuggestMoveStats move_stats = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.move_stats_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SuggestMoveResponse::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SuggestMoveResponse::MergeImpl
};
const ::google::protobuf::Message::ClassData*SuggestMoveResponse::GetClassData() const { return &_class_data_; }


void SuggestMoveResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SuggestMoveResponse*>(&to_msg);
  auto& from = static_cast<const SuggestMoveResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.SuggestMoveResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_move()->::hexzpb::GameEngineMove::MergeFrom(
          from._internal_move());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_move_stats()->::hexzpb::SuggestMoveStats::MergeFrom(
          from._internal_move_stats());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SuggestMoveResponse::CopyFrom(const SuggestMoveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.SuggestMoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SuggestMoveResponse::IsInitialized() const {
  return true;
}

void SuggestMoveResponse::InternalSwap(SuggestMoveResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SuggestMoveResponse, _impl_.move_stats_)
      + sizeof(SuggestMoveResponse::_impl_.move_stats_)
      - PROTOBUF_FIELD_OFFSET(SuggestMoveResponse, _impl_.move_)>(
          reinterpret_cast<char*>(&_impl_.move_),
          reinterpret_cast<char*>(&other->_impl_.move_));
}

::google::protobuf::Metadata SuggestMoveResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[17]);
}
// ===================================================================

class ModelKey::_Internal {
 public:
};

ModelKey::ModelKey(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.ModelKey)
}
ModelKey::ModelKey(const ModelKey& from) : ::google::protobuf::Message() {
  ModelKey* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.checkpoint_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.checkpoint_ = from._impl_.checkpoint_;

  // @@protoc_insertion_point(copy_constructor:hexzpb.ModelKey)
}
inline void ModelKey::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){},
      decltype(_impl_.checkpoint_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ModelKey::~ModelKey() {
  // @@protoc_insertion_point(destructor:hexzpb.ModelKey)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ModelKey::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}
void ModelKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ModelKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.ModelKey)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.checkpoint_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ModelKey::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 28, 2> ModelKey::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ModelKey_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 checkpoint = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ModelKey, _impl_.checkpoint_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ModelKey, _impl_.checkpoint_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ModelKey, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(ModelKey, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 checkpoint = 2;
    {PROTOBUF_FIELD_OFFSET(ModelKey, _impl_.checkpoint_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\17\4\0\0\0\0\0\0"
    "hexzpb.ModelKey"
    "name"
  }},
};

::uint8_t* ModelKey::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.ModelKey)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hexzpb.ModelKey.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 checkpoint = 2;
  if (this->_internal_checkpoint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_checkpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.ModelKey)
  return target;
}

::size_t ModelKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.ModelKey)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // int32 checkpoint = 2;
  if (this->_internal_checkpoint() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_checkpoint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ModelKey::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ModelKey::MergeImpl
};
const ::google::protobuf::Message::ClassData*ModelKey::GetClassData() const { return &_class_data_; }


void ModelKey::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ModelKey*>(&to_msg);
  auto& from = static_cast<const ModelKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.ModelKey)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_checkpoint() != 0) {
    _this->_internal_set_checkpoint(from._internal_checkpoint());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ModelKey::CopyFrom(const ModelKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.ModelKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ModelKey::IsInitialized() const {
  return true;
}

void ModelKey::InternalSwap(ModelKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
        swap(_impl_.checkpoint_, other->_impl_.checkpoint_);
}

::google::protobuf::Metadata ModelKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[18]);
}
// ===================================================================

class AddTrainingExamplesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AddTrainingExamplesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AddTrainingExamplesRequest, _impl_._has_bits_);
  static const ::hexzpb::ModelKey& model_key(const AddTrainingExamplesRequest* msg);
  static void set_has_model_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hexzpb::ModelKey& AddTrainingExamplesRequest::_Internal::model_key(const AddTrainingExamplesRequest* msg) {
  return *msg->_impl_.model_key_;
}
AddTrainingExamplesRequest::AddTrainingExamplesRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.AddTrainingExamplesRequest)
}
AddTrainingExamplesRequest::AddTrainingExamplesRequest(const AddTrainingExamplesRequest& from) : ::google::protobuf::Message() {
  AddTrainingExamplesRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.examples_){from._impl_.examples_},
      decltype(_impl_.execution_id_){},
      decltype(_impl_.model_key_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.execution_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.execution_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution_id().empty()) {
    _this->_impl_.execution_id_.Set(from._internal_execution_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.model_key_ = new ::hexzpb::ModelKey(*from._impl_.model_key_);
  }

  // @@protoc_insertion_point(copy_constructor:hexzpb.AddTrainingExamplesRequest)
}
inline void AddTrainingExamplesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.examples_){arena},
      decltype(_impl_.execution_id_){},
      decltype(_impl_.model_key_){nullptr},
  };
  _impl_.execution_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.execution_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AddTrainingExamplesRequest::~AddTrainingExamplesRequest() {
  // @@protoc_insertion_point(destructor:hexzpb.AddTrainingExamplesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AddTrainingExamplesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.examples_.~RepeatedPtrField();
  _impl_.execution_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.model_key_;
}
void AddTrainingExamplesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AddTrainingExamplesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.AddTrainingExamplesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_examples()->Clear();
  _impl_.execution_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.model_key_ != nullptr);
    _impl_.model_key_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AddTrainingExamplesRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 54, 2> AddTrainingExamplesRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AddTrainingExamplesRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AddTrainingExamplesRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .hexzpb.ModelKey model_key = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AddTrainingExamplesRequest, _impl_.model_key_)}},
    // repeated .hexzpb.TrainingExample examples = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(AddTrainingExamplesRequest, _impl_.examples_)}},
    // string execution_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AddTrainingExamplesRequest, _impl_.execution_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .hexzpb.ModelKey model_key = 1;
    {PROTOBUF_FIELD_OFFSET(AddTrainingExamplesRequest, _impl_.model_key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .hexzpb.TrainingExample examples = 2;
    {PROTOBUF_FIELD_OFFSET(AddTrainingExamplesRequest, _impl_.examples_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string execution_id = 3;
    {PROTOBUF_FIELD_OFFSET(AddTrainingExamplesRequest, _impl_.execution_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::hexzpb::ModelKey>()},
    {::_pbi::TcParser::GetTable<::hexzpb::TrainingExample>()},
  }}, {{
    "\41\0\0\14\0\0\0\0"
    "hexzpb.AddTrainingExamplesRequest"
    "execution_id"
  }},
};

::uint8_t* AddTrainingExamplesRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.AddTrainingExamplesRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .hexzpb.ModelKey model_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::model_key(this),
        _Internal::model_key(this).GetCachedSize(), target, stream);
  }

  // repeated .hexzpb.TrainingExample examples = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_examples_size()); i < n; i++) {
    const auto& repfield = this->_internal_examples().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string execution_id = 3;
  if (!this->_internal_execution_id().empty()) {
    const std::string& _s = this->_internal_execution_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hexzpb.AddTrainingExamplesRequest.execution_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.AddTrainingExamplesRequest)
  return target;
}

::size_t AddTrainingExamplesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.AddTrainingExamplesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hexzpb.TrainingExample examples = 2;
  total_size += 1UL * this->_internal_examples_size();
  for (const auto& msg : this->_internal_examples()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string execution_id = 3;
  if (!this->_internal_execution_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_execution_id());
  }

  // .hexzpb.ModelKey model_key = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.model_key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AddTrainingExamplesRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AddTrainingExamplesRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*AddTrainingExamplesRequest::GetClassData() const { return &_class_data_; }


void AddTrainingExamplesRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AddTrainingExamplesRequest*>(&to_msg);
  auto& from = static_cast<const AddTrainingExamplesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.AddTrainingExamplesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_examples()->MergeFrom(from._internal_examples());
  if (!from._internal_execution_id().empty()) {
    _this->_internal_set_execution_id(from._internal_execution_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_model_key()->::hexzpb::ModelKey::MergeFrom(
        from._internal_model_key());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AddTrainingExamplesRequest::CopyFrom(const AddTrainingExamplesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.AddTrainingExamplesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AddTrainingExamplesRequest::IsInitialized() const {
  return true;
}

void AddTrainingExamplesRequest::InternalSwap(AddTrainingExamplesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.examples_.InternalSwap(&other->_impl_.examples_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.execution_id_, lhs_arena,
                                       &other->_impl_.execution_id_, rhs_arena);
  swap(_impl_.model_key_, other->_impl_.model_key_);
}

::google::protobuf::Metadata AddTrainingExamplesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[19]);
}
// ===================================================================

class AddTrainingExamplesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AddTrainingExamplesResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AddTrainingExamplesResponse, _impl_._has_bits_);
  static const ::hexzpb::ModelKey& latest_model(const AddTrainingExamplesResponse* msg);
  static void set_has_latest_model(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hexzpb::ModelKey& AddTrainingExamplesResponse::_Internal::latest_model(const AddTrainingExamplesResponse* msg) {
  return *msg->_impl_.latest_model_;
}
AddTrainingExamplesResponse::AddTrainingExamplesResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.AddTrainingExamplesResponse)
}
AddTrainingExamplesResponse::AddTrainingExamplesResponse(const AddTrainingExamplesResponse& from) : ::google::protobuf::Message() {
  AddTrainingExamplesResponse* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.error_message_){},
      decltype(_impl_.latest_model_){nullptr},
      decltype(_impl_.status_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.latest_model_ = new ::hexzpb::ModelKey(*from._impl_.latest_model_);
  }
  _this->_impl_.status_ = from._impl_.status_;

  // @@protoc_insertion_point(copy_constructor:hexzpb.AddTrainingExamplesResponse)
}
inline void AddTrainingExamplesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.error_message_){},
      decltype(_impl_.latest_model_){nullptr},
      decltype(_impl_.status_){0},
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AddTrainingExamplesResponse::~AddTrainingExamplesResponse() {
  // @@protoc_insertion_point(destructor:hexzpb.AddTrainingExamplesResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AddTrainingExamplesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.latest_model_;
}
void AddTrainingExamplesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AddTrainingExamplesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.AddTrainingExamplesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.latest_model_ != nullptr);
    _impl_.latest_model_->Clear();
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AddTrainingExamplesResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 56, 2> AddTrainingExamplesResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AddTrainingExamplesResponse, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AddTrainingExamplesResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .hexzpb.AddTrainingExamplesResponse.Status status = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AddTrainingExamplesResponse, _impl_.status_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AddTrainingExamplesResponse, _impl_.status_)}},
    // .hexzpb.ModelKey latest_model = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AddTrainingExamplesResponse, _impl_.latest_model_)}},
    // string error_message = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AddTrainingExamplesResponse, _impl_.error_message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .hexzpb.AddTrainingExamplesResponse.Status status = 1;
    {PROTOBUF_FIELD_OFFSET(AddTrainingExamplesResponse, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .hexzpb.ModelKey latest_model = 2;
    {PROTOBUF_FIELD_OFFSET(AddTrainingExamplesResponse, _impl_.latest_model_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string error_message = 3;
    {PROTOBUF_FIELD_OFFSET(AddTrainingExamplesResponse, _impl_.error_message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::hexzpb::ModelKey>()},
  }}, {{
    "\42\0\0\15\0\0\0\0"
    "hexzpb.AddTrainingExamplesResponse"
    "error_message"
  }},
};

::uint8_t* AddTrainingExamplesResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.AddTrainingExamplesResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .hexzpb.AddTrainingExamplesResponse.Status status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_status(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .hexzpb.ModelKey latest_model = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::latest_model(this),
        _Internal::latest_model(this).GetCachedSize(), target, stream);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    const std::string& _s = this->_internal_error_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hexzpb.AddTrainingExamplesResponse.error_message");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.AddTrainingExamplesResponse)
  return target;
}

::size_t AddTrainingExamplesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.AddTrainingExamplesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_error_message());
  }

  // .hexzpb.ModelKey latest_model = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.latest_model_);
  }

  // .hexzpb.AddTrainingExamplesResponse.Status status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AddTrainingExamplesResponse::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AddTrainingExamplesResponse::MergeImpl
};
const ::google::protobuf::Message::ClassData*AddTrainingExamplesResponse::GetClassData() const { return &_class_data_; }


void AddTrainingExamplesResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AddTrainingExamplesResponse*>(&to_msg);
  auto& from = static_cast<const AddTrainingExamplesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.AddTrainingExamplesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_latest_model()->::hexzpb::ModelKey::MergeFrom(
        from._internal_latest_model());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AddTrainingExamplesResponse::CopyFrom(const AddTrainingExamplesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.AddTrainingExamplesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AddTrainingExamplesResponse::IsInitialized() const {
  return true;
}

void AddTrainingExamplesResponse::InternalSwap(AddTrainingExamplesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, lhs_arena,
                                       &other->_impl_.error_message_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddTrainingExamplesResponse, _impl_.status_)
      + sizeof(AddTrainingExamplesResponse::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(AddTrainingExamplesResponse, _impl_.latest_model_)>(
          reinterpret_cast<char*>(&_impl_.latest_model_),
          reinterpret_cast<char*>(&other->_impl_.latest_model_));
}

::google::protobuf::Metadata AddTrainingExamplesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[20]);
}
// ===================================================================

class TrainingExample_ModelPredictions::_Internal {
 public:
};

TrainingExample_ModelPredictions::TrainingExample_ModelPredictions(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.TrainingExample.ModelPredictions)
}
TrainingExample_ModelPredictions::TrainingExample_ModelPredictions(const TrainingExample_ModelPredictions& from) : ::google::protobuf::Message() {
  TrainingExample_ModelPredictions* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.priors_){},
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.priors_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.priors_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_priors().empty()) {
    _this->_impl_.priors_.Set(from._internal_priors(), _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;

  // @@protoc_insertion_point(copy_constructor:hexzpb.TrainingExample.ModelPredictions)
}
inline void TrainingExample_ModelPredictions::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.priors_){},
      decltype(_impl_.value_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.priors_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.priors_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TrainingExample_ModelPredictions::~TrainingExample_ModelPredictions() {
  // @@protoc_insertion_point(destructor:hexzpb.TrainingExample.ModelPredictions)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrainingExample_ModelPredictions::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.priors_.Destroy();
}
void TrainingExample_ModelPredictions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TrainingExample_ModelPredictions::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.TrainingExample.ModelPredictions)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.priors_.ClearToEmpty();
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TrainingExample_ModelPredictions::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> TrainingExample_ModelPredictions::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TrainingExample_ModelPredictions_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float value = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingExample_ModelPredictions, _impl_.value_)}},
    // bytes priors = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingExample_ModelPredictions, _impl_.priors_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes priors = 1;
    {PROTOBUF_FIELD_OFFSET(TrainingExample_ModelPredictions, _impl_.priors_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // float value = 2;
    {PROTOBUF_FIELD_OFFSET(TrainingExample_ModelPredictions, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TrainingExample_ModelPredictions::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.TrainingExample.ModelPredictions)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes priors = 1;
  if (!this->_internal_priors().empty()) {
    const std::string& _s = this->_internal_priors();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // float value = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  ::uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.TrainingExample.ModelPredictions)
  return target;
}

::size_t TrainingExample_ModelPredictions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.TrainingExample.ModelPredictions)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes priors = 1;
  if (!this->_internal_priors().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_priors());
  }

  // float value = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  ::uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TrainingExample_ModelPredictions::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TrainingExample_ModelPredictions::MergeImpl
};
const ::google::protobuf::Message::ClassData*TrainingExample_ModelPredictions::GetClassData() const { return &_class_data_; }


void TrainingExample_ModelPredictions::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TrainingExample_ModelPredictions*>(&to_msg);
  auto& from = static_cast<const TrainingExample_ModelPredictions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.TrainingExample.ModelPredictions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_priors().empty()) {
    _this->_internal_set_priors(from._internal_priors());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  ::uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrainingExample_ModelPredictions::CopyFrom(const TrainingExample_ModelPredictions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.TrainingExample.ModelPredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TrainingExample_ModelPredictions::IsInitialized() const {
  return true;
}

void TrainingExample_ModelPredictions::InternalSwap(TrainingExample_ModelPredictions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.priors_, lhs_arena,
                                       &other->_impl_.priors_, rhs_arena);
        swap(_impl_.value_, other->_impl_.value_);
}

::google::protobuf::Metadata TrainingExample_ModelPredictions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[21]);
}
// ===================================================================

class TrainingExample_Stats::_Internal {
 public:
};

TrainingExample_Stats::TrainingExample_Stats(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.TrainingExample.Stats)
}
TrainingExample_Stats::TrainingExample_Stats(const TrainingExample_Stats& from) : ::google::protobuf::Message() {
  TrainingExample_Stats* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_per_depth_){from._impl_.nodes_per_depth_},
      /* _impl_._nodes_per_depth_cached_byte_size_ = */ {0},
      decltype(_impl_.duration_micros_){},
      decltype(_impl_.valid_moves_){},
      decltype(_impl_.visit_count_){},
      decltype(_impl_.visited_children_){},
      decltype(_impl_.search_depth_){},
      decltype(_impl_.search_tree_size_){},
      decltype(_impl_.branch_nodes_){},
      decltype(_impl_.min_child_vc_){},
      decltype(_impl_.max_child_vc_){},
      decltype(_impl_.selected_child_vc_){},
      decltype(_impl_.selected_child_q_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&_impl_.duration_micros_, &from._impl_.duration_micros_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.selected_child_q_) -
    reinterpret_cast<char*>(&_impl_.duration_micros_)) + sizeof(_impl_.selected_child_q_));

  // @@protoc_insertion_point(copy_constructor:hexzpb.TrainingExample.Stats)
}
inline void TrainingExample_Stats::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_per_depth_){arena},
      /* _impl_._nodes_per_depth_cached_byte_size_ = */ {0},
      decltype(_impl_.duration_micros_){::int64_t{0}},
      decltype(_impl_.valid_moves_){0},
      decltype(_impl_.visit_count_){0},
      decltype(_impl_.visited_children_){0},
      decltype(_impl_.search_depth_){0},
      decltype(_impl_.search_tree_size_){0},
      decltype(_impl_.branch_nodes_){0},
      decltype(_impl_.min_child_vc_){0},
      decltype(_impl_.max_child_vc_){0},
      decltype(_impl_.selected_child_vc_){0},
      decltype(_impl_.selected_child_q_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TrainingExample_Stats::~TrainingExample_Stats() {
  // @@protoc_insertion_point(destructor:hexzpb.TrainingExample.Stats)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrainingExample_Stats::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodes_per_depth_.~RepeatedField();
}
void TrainingExample_Stats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TrainingExample_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.TrainingExample.Stats)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_nodes_per_depth()->Clear();
  ::memset(&_impl_.duration_micros_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.selected_child_q_) -
      reinterpret_cast<char*>(&_impl_.duration_micros_)) + sizeof(_impl_.selected_child_q_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TrainingExample_Stats::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 0, 0, 2> TrainingExample_Stats::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294960128,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TrainingExample_Stats_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 duration_micros = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TrainingExample_Stats, _impl_.duration_micros_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.duration_micros_)}},
    // int32 valid_moves = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrainingExample_Stats, _impl_.valid_moves_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.valid_moves_)}},
    // int32 visit_count = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrainingExample_Stats, _impl_.visit_count_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.visit_count_)}},
    // int32 visited_children = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrainingExample_Stats, _impl_.visited_children_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.visited_children_)}},
    // int32 search_depth = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrainingExample_Stats, _impl_.search_depth_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.search_depth_)}},
    // int32 search_tree_size = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrainingExample_Stats, _impl_.search_tree_size_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.search_tree_size_)}},
    // int32 branch_nodes = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrainingExample_Stats, _impl_.branch_nodes_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.branch_nodes_)}},
    // int32 min_child_vc = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrainingExample_Stats, _impl_.min_child_vc_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.min_child_vc_)}},
    // int32 max_child_vc = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrainingExample_Stats, _impl_.max_child_vc_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.max_child_vc_)}},
    // int32 selected_child_vc = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrainingExample_Stats, _impl_.selected_child_vc_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.selected_child_vc_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated int32 nodes_per_depth = 12;
    {::_pbi::TcParser::FastV32P1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.nodes_per_depth_)}},
    // int32 selected_child_q = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrainingExample_Stats, _impl_.selected_child_q_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.selected_child_q_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 duration_micros = 1;
    {PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.duration_micros_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 valid_moves = 2;
    {PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.valid_moves_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 visit_count = 3;
    {PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.visit_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 visited_children = 4;
    {PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.visited_children_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 search_depth = 5;
    {PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.search_depth_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 search_tree_size = 6;
    {PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.search_tree_size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 branch_nodes = 7;
    {PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.branch_nodes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 min_child_vc = 8;
    {PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.min_child_vc_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 max_child_vc = 9;
    {PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.max_child_vc_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 selected_child_vc = 10;
    {PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.selected_child_vc_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated int32 nodes_per_depth = 12;
    {PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.nodes_per_depth_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // int32 selected_child_q = 13;
    {PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.selected_child_q_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TrainingExample_Stats::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.TrainingExample.Stats)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 duration_micros = 1;
  if (this->_internal_duration_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_duration_micros(), target);
  }

  // int32 valid_moves = 2;
  if (this->_internal_valid_moves() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_valid_moves(), target);
  }

  // int32 visit_count = 3;
  if (this->_internal_visit_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_visit_count(), target);
  }

  // int32 visited_children = 4;
  if (this->_internal_visited_children() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_visited_children(), target);
  }

  // int32 search_depth = 5;
  if (this->_internal_search_depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_search_depth(), target);
  }

  // int32 search_tree_size = 6;
  if (this->_internal_search_tree_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_search_tree_size(), target);
  }

  // int32 branch_nodes = 7;
  if (this->_internal_branch_nodes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_branch_nodes(), target);
  }

  // int32 min_child_vc = 8;
  if (this->_internal_min_child_vc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_min_child_vc(), target);
  }

  // int32 max_child_vc = 9;
  if (this->_internal_max_child_vc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_max_child_vc(), target);
  }

  // int32 selected_child_vc = 10;
  if (this->_internal_selected_child_vc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_selected_child_vc(), target);
  }

  // repeated int32 nodes_per_depth = 12;
  {
    int byte_size = _impl_._nodes_per_depth_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(12, _internal_nodes_per_depth(),
                                                 byte_size, target);
    }
  }

  // int32 selected_child_q = 13;
  if (this->_internal_selected_child_q() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<13>(
            stream, this->_internal_selected_child_q(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.TrainingExample.Stats)
  return target;
}

::size_t TrainingExample_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.TrainingExample.Stats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 nodes_per_depth = 12;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_nodes_per_depth())
    ;
    _impl_._nodes_per_depth_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // int64 duration_micros = 1;
  if (this->_internal_duration_micros() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_duration_micros());
  }

  // int32 valid_moves = 2;
  if (this->_internal_valid_moves() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_valid_moves());
  }

  // int32 visit_count = 3;
  if (this->_internal_visit_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_visit_count());
  }

  // int32 visited_children = 4;
  if (this->_internal_visited_children() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_visited_children());
  }

  // int32 search_depth = 5;
  if (this->_internal_search_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_search_depth());
  }

  // int32 search_tree_size = 6;
  if (this->_internal_search_tree_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_search_tree_size());
  }

  // int32 branch_nodes = 7;
  if (this->_internal_branch_nodes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_branch_nodes());
  }

  // int32 min_child_vc = 8;
  if (this->_internal_min_child_vc() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_min_child_vc());
  }

  // int32 max_child_vc = 9;
  if (this->_internal_max_child_vc() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_max_child_vc());
  }

  // int32 selected_child_vc = 10;
  if (this->_internal_selected_child_vc() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_selected_child_vc());
  }

  // int32 selected_child_q = 13;
  if (this->_internal_selected_child_q() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_selected_child_q());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TrainingExample_Stats::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TrainingExample_Stats::MergeImpl
};
const ::google::protobuf::Message::ClassData*TrainingExample_Stats::GetClassData() const { return &_class_data_; }


void TrainingExample_Stats::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TrainingExample_Stats*>(&to_msg);
  auto& from = static_cast<const TrainingExample_Stats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.TrainingExample.Stats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_nodes_per_depth()->MergeFrom(from._internal_nodes_per_depth());
  if (from._internal_duration_micros() != 0) {
    _this->_internal_set_duration_micros(from._internal_duration_micros());
  }
  if (from._internal_valid_moves() != 0) {
    _this->_internal_set_valid_moves(from._internal_valid_moves());
  }
  if (from._internal_visit_count() != 0) {
    _this->_internal_set_visit_count(from._internal_visit_count());
  }
  if (from._internal_visited_children() != 0) {
    _this->_internal_set_visited_children(from._internal_visited_children());
  }
  if (from._internal_search_depth() != 0) {
    _this->_internal_set_search_depth(from._internal_search_depth());
  }
  if (from._internal_search_tree_size() != 0) {
    _this->_internal_set_search_tree_size(from._internal_search_tree_size());
  }
  if (from._internal_branch_nodes() != 0) {
    _this->_internal_set_branch_nodes(from._internal_branch_nodes());
  }
  if (from._internal_min_child_vc() != 0) {
    _this->_internal_set_min_child_vc(from._internal_min_child_vc());
  }
  if (from._internal_max_child_vc() != 0) {
    _this->_internal_set_max_child_vc(from._internal_max_child_vc());
  }
  if (from._internal_selected_child_vc() != 0) {
    _this->_internal_set_selected_child_vc(from._internal_selected_child_vc());
  }
  if (from._internal_selected_child_q() != 0) {
    _this->_internal_set_selected_child_q(from._internal_selected_child_q());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrainingExample_Stats::CopyFrom(const TrainingExample_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.TrainingExample.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TrainingExample_Stats::IsInitialized() const {
  return true;
}

void TrainingExample_Stats::InternalSwap(TrainingExample_Stats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nodes_per_depth_.InternalSwap(&other->_impl_.nodes_per_depth_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.selected_child_q_)
      + sizeof(TrainingExample_Stats::_impl_.selected_child_q_)
      - PROTOBUF_FIELD_OFFSET(TrainingExample_Stats, _impl_.duration_micros_)>(
          reinterpret_cast<char*>(&_impl_.duration_micros_),
          reinterpret_cast<char*>(&other->_impl_.duration_micros_));
}

::google::protobuf::Metadata TrainingExample_Stats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[22]);
}
// ===================================================================

class TrainingExample::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainingExample>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_._has_bits_);
  static const ::hexzpb::GameEngineMove& move(const TrainingExample* msg);
  static void set_has_move(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hexzpb::TrainingExample_ModelPredictions& model_predictions(const TrainingExample* msg);
  static void set_has_model_predictions(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hexzpb::TrainingExample_Stats& stats(const TrainingExample* msg);
  static void set_has_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hexzpb::GameEngineMove& TrainingExample::_Internal::move(const TrainingExample* msg) {
  return *msg->_impl_.move_;
}
const ::hexzpb::TrainingExample_ModelPredictions& TrainingExample::_Internal::model_predictions(const TrainingExample* msg) {
  return *msg->_impl_.model_predictions_;
}
const ::hexzpb::TrainingExample_Stats& TrainingExample::_Internal::stats(const TrainingExample* msg) {
  return *msg->_impl_.stats_;
}
TrainingExample::TrainingExample(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hexzpb.TrainingExample)
}
TrainingExample::TrainingExample(const TrainingExample& from) : ::google::protobuf::Message() {
  TrainingExample* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.board_){},
      decltype(_impl_.move_probs_){},
      decltype(_impl_.action_mask_){},
      decltype(_impl_.stats_){nullptr},
      decltype(_impl_.move_){nullptr},
      decltype(_impl_.model_predictions_){nullptr},
      decltype(_impl_.unix_micros_){},
      decltype(_impl_.result_){},
      decltype(_impl_.encoding_){},
      decltype(_impl_.turn_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.board_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.board_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_board().empty()) {
    _this->_impl_.board_.Set(from._internal_board(), _this->GetArenaForAllocation());
  }
  _impl_.move_probs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.move_probs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_move_probs().empty()) {
    _this->_impl_.move_probs_.Set(from._internal_move_probs(), _this->GetArenaForAllocation());
  }
  _impl_.action_mask_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.action_mask_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action_mask().empty()) {
    _this->_impl_.action_mask_.Set(from._internal_action_mask(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.stats_ = new ::hexzpb::TrainingExample_Stats(*from._impl_.stats_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.move_ = new ::hexzpb::GameEngineMove(*from._impl_.move_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.model_predictions_ = new ::hexzpb::TrainingExample_ModelPredictions(*from._impl_.model_predictions_);
  }
  ::memcpy(&_impl_.unix_micros_, &from._impl_.unix_micros_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.turn_) -
    reinterpret_cast<char*>(&_impl_.unix_micros_)) + sizeof(_impl_.turn_));

  // @@protoc_insertion_point(copy_constructor:hexzpb.TrainingExample)
}
inline void TrainingExample::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.board_){},
      decltype(_impl_.move_probs_){},
      decltype(_impl_.action_mask_){},
      decltype(_impl_.stats_){nullptr},
      decltype(_impl_.move_){nullptr},
      decltype(_impl_.model_predictions_){nullptr},
      decltype(_impl_.unix_micros_){::int64_t{0}},
      decltype(_impl_.result_){0},
      decltype(_impl_.encoding_){0},
      decltype(_impl_.turn_){0},
  };
  _impl_.board_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.board_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.move_probs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.move_probs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.action_mask_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.action_mask_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TrainingExample::~TrainingExample() {
  // @@protoc_insertion_point(destructor:hexzpb.TrainingExample)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrainingExample::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.board_.Destroy();
  _impl_.move_probs_.Destroy();
  _impl_.action_mask_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stats_;
  if (this != internal_default_instance()) delete _impl_.move_;
  if (this != internal_default_instance()) delete _impl_.model_predictions_;
}
void TrainingExample::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TrainingExample::Clear() {
// @@protoc_insertion_point(message_clear_start:hexzpb.TrainingExample)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.board_.ClearToEmpty();
  _impl_.move_probs_.ClearToEmpty();
  _impl_.action_mask_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.stats_ != nullptr);
      _impl_.stats_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.move_ != nullptr);
      _impl_.move_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.model_predictions_ != nullptr);
      _impl_.model_predictions_->Clear();
    }
  }
  ::memset(&_impl_.unix_micros_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.turn_) -
      reinterpret_cast<char*>(&_impl_.unix_micros_)) + sizeof(_impl_.turn_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TrainingExample::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 3, 0, 2> TrainingExample::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TrainingExample_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 unix_micros = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TrainingExample, _impl_.unix_micros_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.unix_micros_)}},
    // bytes board = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.board_)}},
    // bytes move_probs = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.move_probs_)}},
    // float result = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.result_)}},
    // .hexzpb.TrainingExample.Stats stats = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.stats_)}},
    // .hexzpb.TrainingExample.Encoding encoding = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrainingExample, _impl_.encoding_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.encoding_)}},
    // int32 turn = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrainingExample, _impl_.turn_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.turn_)}},
    // bytes action_mask = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.action_mask_)}},
    // .hexzpb.GameEngineMove move = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 1, 1, PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.move_)}},
    // .hexzpb.TrainingExample.ModelPredictions model_predictions = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 2, 2, PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.model_predictions_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 unix_micros = 1;
    {PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.unix_micros_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bytes board = 2;
    {PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.board_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes move_probs = 3;
    {PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.move_probs_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // float result = 4;
    {PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.result_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .hexzpb.TrainingExample.Stats stats = 5;
    {PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.stats_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hexzpb.TrainingExample.Encoding encoding = 6;
    {PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.encoding_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 turn = 7;
    {PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.turn_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bytes action_mask = 8;
    {PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.action_mask_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .hexzpb.GameEngineMove move = 9;
    {PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.move_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hexzpb.TrainingExample.ModelPredictions model_predictions = 10;
    {PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.model_predictions_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::hexzpb::TrainingExample_Stats>()},
    {::_pbi::TcParser::GetTable<::hexzpb::GameEngineMove>()},
    {::_pbi::TcParser::GetTable<::hexzpb::TrainingExample_ModelPredictions>()},
  }}, {{
  }},
};

::uint8_t* TrainingExample::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hexzpb.TrainingExample)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 unix_micros = 1;
  if (this->_internal_unix_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_unix_micros(), target);
  }

  // bytes board = 2;
  if (!this->_internal_board().empty()) {
    const std::string& _s = this->_internal_board();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // bytes move_probs = 3;
  if (!this->_internal_move_probs().empty()) {
    const std::string& _s = this->_internal_move_probs();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // float result = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_result = this->_internal_result();
  ::uint32_t raw_result;
  memcpy(&raw_result, &tmp_result, sizeof(tmp_result));
  if (raw_result != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_result(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .hexzpb.TrainingExample.Stats stats = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::stats(this),
        _Internal::stats(this).GetCachedSize(), target, stream);
  }

  // .hexzpb.TrainingExample.Encoding encoding = 6;
  if (this->_internal_encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_encoding(), target);
  }

  // int32 turn = 7;
  if (this->_internal_turn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_turn(), target);
  }

  // bytes action_mask = 8;
  if (!this->_internal_action_mask().empty()) {
    const std::string& _s = this->_internal_action_mask();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  // .hexzpb.GameEngineMove move = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::move(this),
        _Internal::move(this).GetCachedSize(), target, stream);
  }

  // .hexzpb.TrainingExample.ModelPredictions model_predictions = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::model_predictions(this),
        _Internal::model_predictions(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hexzpb.TrainingExample)
  return target;
}

::size_t TrainingExample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hexzpb.TrainingExample)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes board = 2;
  if (!this->_internal_board().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_board());
  }

  // bytes move_probs = 3;
  if (!this->_internal_move_probs().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_move_probs());
  }

  // bytes action_mask = 8;
  if (!this->_internal_action_mask().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_action_mask());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .hexzpb.TrainingExample.Stats stats = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.stats_);
    }

    // .hexzpb.GameEngineMove move = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.move_);
    }

    // .hexzpb.TrainingExample.ModelPredictions model_predictions = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.model_predictions_);
    }

  }
  // int64 unix_micros = 1;
  if (this->_internal_unix_micros() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_unix_micros());
  }

  // float result = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_result = this->_internal_result();
  ::uint32_t raw_result;
  memcpy(&raw_result, &tmp_result, sizeof(tmp_result));
  if (raw_result != 0) {
    total_size += 5;
  }

  // .hexzpb.TrainingExample.Encoding encoding = 6;
  if (this->_internal_encoding() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_encoding());
  }

  // int32 turn = 7;
  if (this->_internal_turn() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_turn());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TrainingExample::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    TrainingExample::MergeImpl
};
const ::google::protobuf::Message::ClassData*TrainingExample::GetClassData() const { return &_class_data_; }


void TrainingExample::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TrainingExample*>(&to_msg);
  auto& from = static_cast<const TrainingExample&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hexzpb.TrainingExample)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_board().empty()) {
    _this->_internal_set_board(from._internal_board());
  }
  if (!from._internal_move_probs().empty()) {
    _this->_internal_set_move_probs(from._internal_move_probs());
  }
  if (!from._internal_action_mask().empty()) {
    _this->_internal_set_action_mask(from._internal_action_mask());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_stats()->::hexzpb::TrainingExample_Stats::MergeFrom(
          from._internal_stats());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_move()->::hexzpb::GameEngineMove::MergeFrom(
          from._internal_move());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_model_predictions()->::hexzpb::TrainingExample_ModelPredictions::MergeFrom(
          from._internal_model_predictions());
    }
  }
  if (from._internal_unix_micros() != 0) {
    _this->_internal_set_unix_micros(from._internal_unix_micros());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_result = from._internal_result();
  ::uint32_t raw_result;
  memcpy(&raw_result, &tmp_result, sizeof(tmp_result));
  if (raw_result != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_encoding() != 0) {
    _this->_internal_set_encoding(from._internal_encoding());
  }
  if (from._internal_turn() != 0) {
    _this->_internal_set_turn(from._internal_turn());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrainingExample::CopyFrom(const TrainingExample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hexzpb.TrainingExample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TrainingExample::IsInitialized() const {
  return true;
}

void TrainingExample::InternalSwap(TrainingExample* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.board_, lhs_arena,
                                       &other->_impl_.board_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.move_probs_, lhs_arena,
                                       &other->_impl_.move_probs_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.action_mask_, lhs_arena,
                                       &other->_impl_.action_mask_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.turn_)
      + sizeof(TrainingExample::_impl_.turn_)
      - PROTOBUF_FIELD_OFFSET(TrainingExample, _impl_.stats_)>(
          reinterpret_cast<char*>(&_impl_.stats_),
          reinterpret_cast<char*>(&other->_impl_.stats_));
}

::google::protobuf::Metadata TrainingExample::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hexz_2eproto_getter, &descriptor_table_hexz_2eproto_once,
      file_level_metadata_hexz_2eproto[23]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace hexzpb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
